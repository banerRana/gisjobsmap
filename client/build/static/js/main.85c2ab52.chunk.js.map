{"version":3,"sources":["utils/http_functions.js","config.js","utils/misc.js","modules/index.js","modules/data.js","modules/detail.js","modules/geocode.js","modules/highlightMarker.js","modules/tags.js","modules/categories.js","modules/mapbounds.js","store.js","hooks/useRouter.js","utils/routing.js","components/JobSearch/index.js","components/SidebarCollapased/index.js","components/NearestCity/index.js","components/ListItem/index.js","components/ListItemSponsored/index.js","components/ListJobs/index.js","components/SidebarOpened/index.js","contexts/SidebarContext.js","components/SidebarContainer/index.js","hooks/useWindowSize.js","components/JobDetail/Header/index.js","components/JobDetail/Share/index.js","components/JobDetail/index.js","components/MarkerClusterGroup/index.js","components/JobClusters/index.js","components/LeafletMap/index.js","components/AboutModal/index.js","components/PrivacyModal/index.js","components/Navbar/index.js","contexts/JobPostContext.js","components/JobPost/JobPostInfo/index.js","components/JobPost/JobPostDetails/index.js","components/JobPost/JobPostLocation/index.js","components/JobPost/JobPostPayment/index.js","components/JobPost/index.js","contexts/JobDetailContext.js","components/App/index.js","index.js"],"names":["getTags","params","axios","get","getCategories","basemapProvider","countries","ar","au","at","bh","be","br","ca","cl","cn","co","cr","cz","dk","ec","eg","fi","fr","de","gr","hk","hu","in","id","ie","il","it","jp","kr","kw","lu","my","mx","ma","nl","nz","ng","no","om","pk","pa","pe","ph","pl","pt","qa","ro","ru","sa","sg","za","es","se","ch","tw","th","tr","ua","ae","gb","us","uy","ve","vn","parseJSON","response","data","getRelativeTime","timestamp","t","format","includes","history","initialState","isFetching","dataId","error","status","features","near","properties","country","iso2","name","geom","state","action","type","payload","searches","fetchData","dispatch","Math","random","paramsSerializer","queryString","stringify","arrayFormat","then","catch","slug","geometry","fetchDetail","closeDetail","searchTerm","selected","coords","results","message","fetchGeocodeResults","setGeocodeResults","JSON","parse","title","toggleHighlightMarker","respsonse","bounds","createHistory","require","createBrowserHistory","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","combineReducers","router","connectRouter","detail","geocode","highlightMarker","tags","categories","mapbounds","middleware","thunk","routerMiddleware","useRouter","useParams","location","useLocation","useHistory","match","useRouteMatch","useMemo","push","replace","pathname","query","search","validSearches","stringifyQueryParams","queries","result","getQueryCount","queryObject","Object","keys","length","resetQueryParams","box","formItemLayout","labelCol","wrapperCol","WrappedJobSearchForm","Form","create","st","form","initialValues","parseBooleans","parseNumbers","getFieldDecorator","useState","setTags","setCategories","handleSubmit","e","preventDefault","validateFields","err","fieldsValue","obj","values","handleSearch","date","remote","q","useEffect","console","log","style","width","textAlign","onSubmit","labelAlign","size","span","Item","marginBottom","initialValue","rules","required","placeholder","disabled","suffix","label","valuePropName","onChange","onClick","resetFields","marginRight","loading","htmlType","SidebarCollapased","className","gutter","padding","fontSize","fontWeight","whiteSpace","count","background","placement","content","layer","trigger","icon","shape","Text","Typography","NearestCity","displayString","admin1","countryDisplay","timezone","toLowerCase","ellipsis","maxWidth","ListItem","props","item","relTime","publishDate","Meta","color","description","company","isRemote","coordinates","formattedLocation","CategoriesRow","cat","margin","map","c","ListItemSponsored","connect","bindActionCreators","dataSource","onMouseEnter","handleMapHighlight","onMouseLeave","SidebarOpened","handleClick","infiniteParentRef","useRef","listData","setListData","listIdx","setListIdx","current","scrollTop","slice","scrollAmount","height","minHeight","backgroundColor","boxShadow","zIndex","verticalAlign","strong","marginTop","overflowY","ref","initialLoad","pageStart","loadMore","concat","hasMore","useWindow","locale","emptyText","renderItem","SideBarContext","createContext","SidebarContextProvider","children","window","innerWidth","isSidebarOpen","setSidebarOpen","isMobile","screen","outerWidth","Provider","value","Sider","Layout","Content","Footer","searchFetch","toggleMarker","windowSize","getSize","innerHeight","setWindowSize","handleResize","addEventListener","removeEventListener","useWindowSize","useContext","collapsible","collapsed","position","top","left","marginLeft","overflow","theme","breakpoint","collapsedWidth","borderTop","cursor","nodeType","nodeText","getTriggerNode","Header","source","url","href","target","rel","Share","copyIcon","setCopyIcon","baseUrl","origin","shareLink","hashTags","join","twitterShareLink","encodeURIComponent","facebookShareLink","linkedInShareLink","prefix","link","navigator","clipboard","writeText","setTimeout","Paragraph","visible","onCancel","bodyStyle","paddingTop","footer","MarkerClusterGroup","el","L","markerClusterGroup","this","contextValue","leaflet","layerContainer","MapLayer","withLeaflet","JobClusters","mapFeatures","markerClick","chunkedLoading","chunkInterval","invalidGeom","Marker","Tooltip","direction","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","initialBounds","startBoxQuery","s","split","parseFloat","boxQueryToArray","mapBounds","setCrosshairVisible","hasJobDetailOnLoad","setHasJobDetailOnLoad","mapRef","jobFeatureGroupRef","onMarkerClick","options","leafletElement","invalidateSize","popup","closeButton","autoPan","offset","setLatLng","setContent","openOn","closePopup","jobClustersMemo","fitBounds","setView","mapStyle","Map","zoomControl","onMoveEnd","getBounds","min","getSouthWest","wrap","max","getNorthEast","urlBoxParam","lng","lat","boxArray","toFixed","shortenBoxUrlParam","toBBoxString","newQueries","forEach","validateSearches","maxZoom","zoom","center","attributionControl","boundsOptions","worldCopyJump","AttributionControl","TileLayer","attribution","ZoomControl","FeatureGroup","GeoJSON","stroke","weight","fillOpacity","CircleMarker","strokeColor","strokeOpacity","radius","AboutModal","onClose","method","src","border","alt","PrivacyModal","highlightLayer","aboutModalVisible","setAboutModalVisible","privacyModalVisible","setPrivacyModalVisible","aboutMemo","privacyMemo","mode","lineHeight","float","indexOf","open","handleMenuClick","selectedKeys","SubMenu","expandIcon","paddingLeft","JobPostContext","JobPostContextProvider","isJobPostOpen","setJobPostOpen","Title","iconStyle","JobPostInfo","level","Option","Select","xs","sm","md","lg","JobPostDetails","colon","whitespace","organization","help","compensation","TextArea","rows","layout","JobPostLocation","geocodeOptions","setGeocodeOptions","setMapCoords","lon","hasFeedback","countryCode","showSearch","val","setFieldsValue","undefined","city","Group","Button","allowClear","filterOption","optionLabelProp","opt","formatted","getGeocodeOptions","onSelect","text","display","JobPostPayment","stripeCheck","setStripeCheck","successMessage","setSuccessMessage","errMessage","setErrMessage","tailFormItemLayout","validateFieldsAndScroll","process","REACT_APP_STRIPE_PUBLISH_KEY","Stripe","setPublishableKey","card","number","cvc","exp_month","expDate","exp_year","createToken","stripeToken","post","success","activeDays","email","len","formattedValue","detailFormRef","locationFormRef","paymentFormRef","detailFormValues","setDetailFormValues","locationFormValues","setLocationFormValues","paymentFormValues","setPaymentFormValues","WrappedDetailForm","WrappedLocationForm","WrappedPaymentForm","setCurrent","Step","Steps","steps","JobDetailContext","JobDetailContextProvider","isJobDetailOpen","setJobDetailOpen","App","SidebarContext","preloadedState","store","createStore","compose","applyMiddleware","persistor","persistStore","configureStore","document","querySelector","ReactGA","initialize","pageview","listen","set","page","render","path","component"],"mappings":"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","file":"static/js/main.85c2ab52.chunk.js","sourcesContent":["import axios from \"axios\";\nimport queryString from \"query-string\";\n\n// get user location and initialize map. Pass in argument to get user Location or not.\nexport function getJobs(params) {\n    return axios.get(\"/jobs/all\", {\n        params,\n        paramsSerializer: function(params) {\n            return queryString.stringify(params, { arrayFormat: \"repeat\" });\n        }\n    });\n}\n\nexport function postJob(params) {\n    return axios.post(\"/jobs/add-no-auth\", params);\n}\n\nexport function getOrganizations(params) {\n    return axios.get(\"/organizations/all\", { params });\n}\n\nexport function getSchools(params) {\n    return axios.get(\"/schools/all\", { params });\n}\n\nexport function getRFPs(params) {\n    return axios.get(\"/rfps/all\", { params });\n}\n\nexport function getResumes(params) {\n    return axios.get(\"/resumes/all\", { params });\n}\n\n// get user location and initialize map\nexport function getJobDetail(params) {\n    return axios.get(\"/jobs/detail\", { params });\n}\n\nexport function getOrganizationDetail(params) {\n    return axios.get(\"/organizations/detail\", { params });\n}\n\n// geocoder - also pass in current country.\nexport function doGeocode(params) {\n    return axios.get(\"/geonames/geocode\", { params });\n}\n\nexport function getTitles() {\n    return axios.get(\"/titles/all\");\n}\n\nexport function getTags(params) {\n    return axios.get(\"/tags/all\", { params });\n}\n\nexport function getCategories(params) {\n    return axios.get(\"/categories/all\", { params });\n}\n\nexport function getOrganizationSuggestions(params) {\n    return axios.get(\"/organizations/all\", { params });\n}\n\nexport function getReverseGeocode(params) {\n    return axios.get(\"/geonames/reverse-geocode\", { params });\n}\n\nexport function getGeocode(params) {\n    return axios.get(\"/geonames/geocode\", { params });\n}\n\n// get user location\n// export function getLocation(params){\n//     return axios.get('/api/getLocation');\n// }\n","export const basemapProvider =\n    \"https://tiles.stadiamaps.com/tiles/alidade_smooth/{z}/{x}/{y}{r}.png\";\n\nexport const countries = {\n    ar: \"Argentina\",\n    au: \"Australia\",\n    at: \"Austria\",\n    bh: \"Bahrain\",\n    be: \"Belgium\",\n    br: \"Brazil\",\n    ca: \"Canada\",\n    cl: \"Chile\",\n    cn: \"China\",\n    co: \"Colombia\",\n    cr: \"Costa Rica\",\n    cz: \"Czech Republic\",\n    dk: \"Denmark\",\n    ec: \"Ecuador\",\n    eg: \"Egypt\",\n    fi: \"Finland\",\n    fr: \"France\",\n    de: \"Germany\",\n    gr: \"Greece\",\n    hk: \"Hong Kong\",\n    hu: \"Hungary\",\n    in: \"India\",\n    id: \"Indonesia\",\n    ie: \"Ireland\",\n    il: \"Israel\",\n    it: \"Italy\",\n    jp: \"Japan\",\n    kr: \"Republic of Korea\",\n    kw: \"Kuwait\",\n    lu: \"Luxembourg\",\n    my: \"Malaysia\",\n    mx: \"Mexico\",\n    ma: \"Morocco\",\n    nl: \"Netherlands\",\n    nz: \"New Zealand\",\n    ng: \"Nigeria\",\n    no: \"Norway\",\n    om: \"Oman\",\n    pk: \"Pakistan\",\n    pa: \"Panama\",\n    pe: \"Peru\",\n    ph: \"Philippines\",\n    pl: \"Poland\",\n    pt: \"Portugal\",\n    qa: \"Qatar\",\n    ro: \"Romania\",\n    ru: \"Russia\",\n    sa: \"Saudi Arabia\",\n    sg: \"Singapore\",\n    za: \"South Africa\",\n    es: \"Spain\",\n    se: \"Sweden\",\n    ch: \"Switzerland\",\n    tw: \"Taiwan\",\n    th: \"Thailand\",\n    tr: \"Turkey\",\n    ua: \"Ukraine\",\n    ae: \"United Arab Emirates\",\n    gb: \"United Kingdom\",\n    us: \"United States\",\n    uy: \"Uruguay\",\n    ve: \"Venezuela\",\n    vn: \"Viet Nam\"\n};\n","import { format } from \"timeago.js\";\n\nimport { countries } from \"../config\";\n\nexport function parseJSON(response) {\n    return response.data;\n}\n\nexport const getRelativeTime = timestamp => {\n    const t = format(`${timestamp[0]} ${timestamp[1]}`);\n    if (t.includes(\"hour\") || t.includes(\"minute\") || t.includes(\"second\")) {\n        return \"Today\";\n    }\n    return t;\n};\n\nexport const strShort = (str, length) => {\n    // let length = large ?  42 : 25;\n    if (str === str.toUpperCase()) {\n        return length - 3;\n    }\n    if (str.length > length) {\n        return str.substr(0, length).trim() + \"...\";\n    }\n    return str;\n};\n\nexport function validateEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n\nexport const removeEmpty = obj => {\n    const o = JSON.parse(JSON.stringify(obj)); // Clone source oect.\n\n    Object.keys(o).forEach(key => {\n        if (o[key] && typeof o[key] === \"object\") o[key] = removeEmpty(o[key]);\n        // Recurse.\n        else if (typeof o[key] === \"boolean\") o[key] === false && delete o[key];\n        else if (o[key] === undefined || o[key] === null || !o[key].length)\n            delete o[key];\n        // Delete undefined and null.\n\n        // else o[key] = o[key]; // Copy value.\n    });\n\n    return o; // Return new object.\n};\n\n// export const isJson = (item) => {\n//     item = typeof item !== \"string\"\n//         ? JSON.stringify(item)\n//         : item;\n\n//     try {\n//         item = JSON.parse(item);\n//     } catch (e) {\n//         return false;\n//     }\n//     return (typeof item === \"object\" && item !== null)\n// };\n\n// export const isCountryValid = (iso2) => {\n//     let verdict = '';\n//     if (iso2) {\n//         verdict = 'us';\n//         Object.entries(countries).forEach(([key, value]) => {\n//             if (key.toLowerCase() === iso2.toLowerCase()) {\n//                 verdict = iso2.toLowerCase()\n//             }\n//         })\n//     }\n\n//     return verdict\n// }\n\n// detemrines if there are any searches aside from iso2\nexport const checkIfSearchEmpty = inSearches => {\n    const searchObj = { ...inSearches };\n    delete searchObj.iso2;\n    if (\n        searchObj === null ||\n        searchObj === undefined ||\n        Array.isArray(searchObj) ||\n        typeof searchObj !== \"object\"\n    ) {\n        return true;\n    }\n    return Object.getOwnPropertyNames(searchObj).length === 0;\n};\n\nexport const countryNameFromIso2 = iso2 => {\n    if (iso2) {\n        Object.entries(countries).forEach(([key, value]) => {\n            if (key.toLowerCase() === iso2.toLowerCase()) {\n                return value;\n            }\n            return null;\n        });\n    }\n    return null;\n};\n\n// used to retrieve title case and validate layer name\nexport const layerNameTitleCase = layer => {\n    const layers = {\n        jobs: \"Jobs\",\n        organizations: \"Organizations\",\n        schools: \"Schools\",\n        rfps: \"RFPs\",\n        resumes: \"Resumes\"\n    };\n\n    return layers[layer];\n};\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\n\nimport data from \"./data\";\nimport detail from \"./detail\";\nimport geocode from \"./geocode\";\nimport highlightMarker from \"./highlightMarker\";\nimport tags from \"./tags\";\nimport categories from \"./categories\";\nimport mapbounds from \"./mapbounds\";\n\nexport default history =>\n    combineReducers({\n        router: connectRouter(history),\n        data,\n        detail,\n        geocode,\n        highlightMarker,\n        tags,\n        categories,\n        mapbounds\n    });\n","import {\n    getJobs\n    // getOrganizations,\n    // getSchools,\n    // getRFPs,\n    // getResumes\n} from \"../utils/http_functions\";\nimport { parseJSON } from \"../utils/misc\";\n\nexport const FETCH_DATA_REQUEST = \"data/FETCH_DATA_REQUEST\";\nexport const RECEIVE_DATA = \"data/RECEIVE_DATA\";\nexport const RECEIVE_DATA_ERROR = \"data/RECEIVE_DATA_ERROR\";\n\nconst initialState = {\n    isFetching: false,\n    dataId: null,\n    error: { status: false, response: null },\n    features: [],\n    near: { properties: {} },\n    country: { iso2: \"\", name: \"\", geom: {} }\n};\n\n// reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_DATA_REQUEST:\n            return {\n                ...state,\n                isFetching: true,\n                dataId: action.payload.dataId,\n                searches: action.payload.searches,\n                features: initialState.features,\n                near: initialState.near,\n                country: initialState.country,\n                error: { status: false, response: null }\n            };\n\n        case RECEIVE_DATA:\n            if (state.dataId === action.payload.dataId) {\n                return {\n                    ...state,\n                    isFetching: false,\n                    features: action.payload.response.data,\n                    near: action.payload.response.near,\n                    country: action.payload.response.country\n                };\n            }\n            return state;\n\n        case RECEIVE_DATA_ERROR:\n            return {\n                ...state,\n                isFetching: false,\n                error: action.payload.response\n            };\n\n        default:\n            return state;\n    }\n};\n\n// action\nexport const fetchData = searches => {\n    return dispatch => {\n        const dataId = Math.random();\n\n        dispatch({\n            type: FETCH_DATA_REQUEST,\n            payload: { searches, dataId }\n        });\n\n        getJobs(searches)\n            .then(parseJSON)\n            .then(response => {\n                dispatch({\n                    type: RECEIVE_DATA,\n                    payload: { response, dataId }\n                });\n            })\n            .catch(error => {\n                dispatch({\n                    type: RECEIVE_DATA_ERROR,\n                    payload: error\n                });\n            });\n\n        // if (layer.toLowerCase() === 'jobs') {\n        //     getJobs(searches)\n        //         .then(parseJSON)\n        //         .then(response => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA,\n        //                 payload: { response, dataId }\n        //             })\n        //         })\n        //         .catch(error => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA_ERROR,\n        //                 payload: error\n        //             })\n        //         });\n        // }\n\n        // else if (layer.toLowerCase() === 'organizations') {\n        //     getOrganizations(searches)\n        //         .then(parseJSON)\n        //         .then(response => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA,\n        //                 payload: { response, dataId }\n        //             })\n        //         })\n        //         .catch(error => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA_ERROR,\n        //                 payload: error\n        //             })\n        //         });\n        // }\n\n        // else if (layer.toLowerCase() === 'schools') {\n        //     getSchools(searches)\n        //         .then(parseJSON)\n        //         .then(response => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA,\n        //                 payload: { response, dataId }\n        //             })\n        //         })\n        //         .catch(error => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA_ERROR,\n        //                 payload: error\n        //             })\n        //         });\n        // }\n\n        // else if (layer.toLowerCase() === 'rfps') {\n        //     getRFPs(searches)\n        //         .then(parseJSON)\n        //         .then(response => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA,\n        //                 payload: { response, dataId }\n        //             })\n        //         })\n        //         .catch(error => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA_ERROR,\n        //                 payload: error\n        //             })\n        //         });\n        // }\n\n        // else if (layer.toLowerCase() === 'resumes') {\n        //     getResumes(searches)\n        //         .then(parseJSON)\n        //         .then(response => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA,\n        //                 payload: { response, dataId }\n        //             })\n        //         })\n        //         .catch(error => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA_ERROR,\n        //                 payload: error\n        //             })\n        //         });\n        // }\n\n        // else if (layer.toLowerCase() === 'events') {\n        //     getResumes(searches)\n        //         .then(parseJSON)\n        //         .then(response => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA,\n        //                 payload: { response, dataId }\n        //             })\n        //         })\n        //         .catch(error => {\n        //             dispatch({\n        //                 type: RECEIVE_DATA_ERROR,\n        //                 payload: error\n        //             })\n        //         });\n        // }\n    };\n};\n","import { getJobDetail } from \"../utils/http_functions\";\nimport { parseJSON } from \"../utils/misc\";\n\nexport const FETCH_DETAIL_REQUEST = \"detail/FETCH_DETAIL_REQUEST\";\nexport const RECEIVE_DETAIL = \"detail/RECEIVE_DETAIL\";\nexport const RECEIVE_DETAIL_ERROR = \"detail/RECEIVE_DETAIL_ERROR\";\nexport const CLOSE_DETAIL = \"detail/CLOSE_DETAIL\";\n\nconst initialState = {\n    isFetching: false,\n    dataId: null,\n    slug: null,\n    data: { geometry: {}, properties: {} },\n    error: { status: false, response: null }\n};\n\n// reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_DETAIL_REQUEST:\n            return {\n                ...initialState,\n                isFetching: true,\n                dataId: action.payload.dataId,\n                slug: action.payload.slug,\n                error: { status: false, response: null }\n            };\n\n        case RECEIVE_DETAIL:\n            if (state.dataId === action.payload.dataId) {\n                return {\n                    ...state,\n                    isFetching: false,\n                    data: action.payload.data\n                };\n            }\n            return state;\n\n        case RECEIVE_DETAIL_ERROR:\n            return {\n                ...state,\n                isFetching: false,\n                error: { status: true, response: action.payload }\n            };\n\n        case CLOSE_DETAIL:\n            return {\n                ...state,\n                isFetching: false,\n                dataId: null,\n                slug: null\n            };\n        default:\n            return state;\n    }\n};\n\n// action\nexport const fetchDetail = slug => {\n    // const jobId = jobData.id;\n    // const { slug } = jobData;\n    return dispatch => {\n        const dataId = Math.random();\n\n        dispatch({\n            type: FETCH_DETAIL_REQUEST,\n            payload: { dataId, slug }\n        });\n        // if (layer === \"jobs\") {\n        getJobDetail({ slug })\n            .then(parseJSON)\n            .then(response => {\n                const { data } = response;\n                dispatch({\n                    type: RECEIVE_DETAIL,\n                    payload: { data, dataId }\n                });\n            })\n            .catch(error => {\n                dispatch({\n                    type: RECEIVE_DETAIL_ERROR,\n                    payload: error\n                });\n            });\n        // }\n        // else if (layer === \"organizations\") {\n        //   getOrganizationDetail({ slug })\n        //     .then(parseJSON)\n        //     .then(response => {\n        //       const { results } = response;\n        //       dispatch({\n        //         type: RECEIVE_DETAIL,\n        //         payload: { results, dataId }\n        //       });\n        //     })\n        //     .catch(error => {\n        //       dispatch({\n        //         type: RECEIVE_DETAIL_ERROR,\n        //         payload: error\n        //       });\n        //     });\n        // }\n    };\n};\n\n// action\nexport const closeDetail = () => {\n    return dispatch => {\n        dispatch({\n            type: CLOSE_DETAIL\n        });\n    };\n};\n","import { doGeocode } from \"../utils/http_functions\";\nimport { parseJSON } from \"../utils/misc\";\n\nexport const FETCH_GEOCODE_REQUEST = \"geocode/FETCH_GEOCODE_REQUEST\";\nexport const RECEIVE_GEOCODE = \"geocode/RECEIVE_GEOCODE\";\nexport const RECEIVE_GEOCODE_ERROR = \"geocode/RECEIVE_GEOCODE_ERROR\";\nexport const SET_SELECTED_GEOCODE = \"geocode/SET_SELECTED_GEOCODE\";\n\nconst initialState = {\n    isFetching: false,\n    dataId: null,\n    searchTerm: \"\",\n    selected: {\n        coords: [],\n        id: 0\n    },\n    results: [],\n    status: \"success\",\n    message: {}\n};\n\n// reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_GEOCODE_REQUEST:\n            return {\n                ...state,\n                isFetching: true,\n                dataId: action.payload.dataId,\n                searchTerm: action.payload.searchTerm\n            };\n\n        case RECEIVE_GEOCODE:\n            if (state.dataId === action.payload.dataId) {\n                return {\n                    ...state,\n                    isFetching: false,\n                    results: action.payload.response.data,\n                    status: action.payload.response.status\n                };\n            }\n            return state;\n\n        case RECEIVE_GEOCODE_ERROR:\n            return {\n                ...state,\n                isFetching: false,\n                status: \"fail\",\n                message: action.payload\n            };\n\n        case SET_SELECTED_GEOCODE:\n            return {\n                ...state,\n                selected: {\n                    id: action.payload.id,\n                    coords: action.payload.coords\n                }\n            };\n\n        default:\n            return state;\n    }\n};\n\n// action\nexport const fetchGeocodeResults = searchTerm => {\n    return dispatch => {\n        const dataId = Math.random();\n\n        dispatch({\n            type: FETCH_GEOCODE_REQUEST,\n            payload: { searchTerm, dataId }\n        });\n\n        doGeocode(searchTerm)\n            .then(parseJSON)\n            .then(response => {\n                dispatch({\n                    type: RECEIVE_GEOCODE,\n                    payload: { response, dataId }\n                });\n            })\n            .catch(error => {\n                dispatch({\n                    type: RECEIVE_GEOCODE_ERROR,\n                    payload: error\n                });\n            });\n    };\n};\n\n// action\nexport const setGeocodeResults = selected => {\n    const id = Math.random();\n\n    const coords = JSON.parse(selected);\n\n    return dispatch => {\n        dispatch({\n            type: SET_SELECTED_GEOCODE,\n            payload: { coords, id }\n        });\n    };\n};\n","export const HIGHLIGHT_MARKER_REQUEST =\n    \"highlightMarker/HIGHLIGHT_MARKER_REQUEST\";\nexport const CLEAR_MARKER_REQUEST = \"highlightMarker/CLEAR_MARKER_REQUEST\";\n\nconst initialState = {\n    geometry: {},\n    title: \"\"\n};\n\n// reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case HIGHLIGHT_MARKER_REQUEST:\n            return {\n                ...state,\n                geometry: action.payload.geometry,\n                title: action.payload.title\n            };\n\n        case CLEAR_MARKER_REQUEST:\n            return {\n                ...state,\n                geometry: {},\n                title: \"\"\n            };\n        default:\n            return state;\n    }\n};\n\n// action\nexport const toggleHighlightMarker = (geometry, title) => {\n    return dispatch => {\n        if (geometry) {\n            dispatch({\n                type: HIGHLIGHT_MARKER_REQUEST,\n                payload: { geometry, title }\n            });\n        } else {\n            dispatch({\n                type: CLEAR_MARKER_REQUEST\n            });\n        }\n    };\n};\n","import { getTags } from \"../utils/http_functions\";\n\nimport { parseJSON } from \"../utils/misc\";\n\nexport const FETCH_TAGS_REQUEST = \"tags/FETCH_TAGS_REQUEST\";\nexport const RECEIVE_TAGS = \"tags/RECEIVE_TAGS\";\nexport const RECEIVE_TAGS_ERROR = \"tags/RECEIVE_TAGS_ERROR\";\n\nconst initialState = {\n    isFetching: false,\n    status: \"\",\n    data: []\n};\n\n// reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_TAGS_REQUEST:\n            return {\n                ...state,\n                isFetching: true\n            };\n\n        case RECEIVE_TAGS:\n            return {\n                ...state,\n                isFetching: false,\n                data: action.response.data,\n                status: action.respsonse.status\n            };\n\n        case RECEIVE_TAGS_ERROR:\n            return {\n                ...state,\n                isFetching: false,\n                data: action.response.data,\n                status: action.respsonse.status\n            };\n\n        default:\n            return state;\n    }\n};\n\n// action\nexport const fetchTags = searches => {\n    return dispatch => {\n        dispatch({\n            type: FETCH_TAGS_REQUEST\n        });\n\n        getTags()\n            .then(parseJSON)\n            .then(response => {\n                dispatch({\n                    type: RECEIVE_TAGS,\n                    payload: response\n                });\n            })\n            .catch(error => {\n                dispatch({\n                    type: RECEIVE_TAGS_ERROR,\n                    payload: error\n                });\n            });\n    };\n};\n","import { getTitles } from \"../utils/http_functions\";\n\nimport { parseJSON } from \"../utils/misc\";\n\nexport const FETCH_CATEGORIES_REQUEST = \"categories/FETCH_CATEGORIES_REQUEST\";\nexport const RECEIVE_CATEGORIES = \"categories/RECEIVE_CATEGORIES\";\nexport const RECEIVE_CATEGORIES_ERROR = \"categories/RECEIVE_CATEGORIES_ERROR\";\n\nconst initialState = {\n    isFetching: false,\n    status: \"\",\n    data: []\n};\n\n// reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_CATEGORIES_REQUEST:\n            return {\n                ...state,\n                isFetching: true\n            };\n\n        case RECEIVE_CATEGORIES:\n            return {\n                ...state,\n                isFetching: false,\n                data: action.response.data,\n                status: action.respsonse.status\n            };\n\n        case RECEIVE_CATEGORIES_ERROR:\n            return {\n                ...state,\n                isFetching: false,\n                data: action.response.data,\n                status: action.respsonse.status\n            };\n\n        default:\n            return state;\n    }\n};\n\n// action\nexport const fetchCategories = searches => {\n    return dispatch => {\n        dispatch({\n            type: FETCH_CATEGORIES_REQUEST\n        });\n\n        getTitles()\n            .then(parseJSON)\n            .then(response => {\n                dispatch({\n                    type: RECEIVE_CATEGORIES,\n                    payload: response\n                });\n            })\n            .catch(error => {\n                dispatch({\n                    type: RECEIVE_CATEGORIES_ERROR,\n                    payload: error\n                });\n            });\n    };\n};\n","export const SET_MAPBOUNDS_REQUEST = \"mapbounds/SET_MAPBOUNDS_REQUEST\";\nexport const RESET_MAPBOUNDS_REQUEST = \"mapbounds/RESET_MAPBOUNDS_REQUEST\";\n\nconst initialState = {\n    bounds: [\n        [-74.8471, 40.0991],\n        [-73.504, 41.3809]\n    ]\n};\n\n// reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case SET_MAPBOUNDS_REQUEST:\n            return {\n                ...state,\n                bounds: action.payload\n            };\n\n        case RESET_MAPBOUNDS_REQUEST:\n            return initialState;\n        default:\n            return state;\n    }\n};\n\n// action\nexport const updateMapBounds = bounds => {\n    return dispatch => {\n        if (bounds) {\n            dispatch({\n                type: SET_MAPBOUNDS_REQUEST,\n                payload: bounds\n            });\n        } else {\n            dispatch({\n                type: RESET_MAPBOUNDS_REQUEST\n            });\n        }\n    };\n};\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport { routerMiddleware } from \"connected-react-router\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from \"redux-persist\";\n// import hardSet from \"redux-persist/lib/stateReconciler/hardSet\";\nimport storage from \"redux-persist/lib/storage\";\nimport { createLogger } from \"redux-logger\";\n\nimport createRootReducer from \"./modules\";\n\nconst createHistory = require(\"history\").createBrowserHistory;\n\nexport const history = createHistory();\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    // stateReconciler: hardSet,\n    whitelist: [\"auth\"]\n    // whitelist: []\n    // blacklist: [\"router\", \"data\"]\n};\n\nconst persistedReducer = persistReducer(\n    persistConfig,\n    createRootReducer(history)\n);\n\nconst enhancers = []; // TODO: not setup properly\nconst middleware = [thunk, routerMiddleware(history)];\n\nif (process.env.NODE_ENV === \"development\") {\n    const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n    if (typeof devToolsExtension === \"function\") {\n        enhancers.push(devToolsExtension());\n    }\n    const logger = createLogger({\n        collapsed: true\n    });\n    middleware.push(logger);\n}\n\nexport default function configureStore(preloadedState) {\n    const store = createStore(\n        persistedReducer, // root reducer with router state\n        preloadedState,\n        compose(\n            applyMiddleware(\n                routerMiddleware(history), // for dispatching history actions\n                ...middleware\n                // ... other middlewares ...\n            )\n        )\n    );\n    const persistor = persistStore(store);\n\n    return { persistor, store };\n}\n","import { useMemo } from \"react\";\n\nimport {\n    useParams,\n    useLocation,\n    useHistory,\n    useRouteMatch\n} from \"react-router-dom\";\nimport queryString from \"query-string\";\n\n// Usage\n// function MyComponent(){\n//   // Get the router object\n//   const router = useRouter();\n\n//   // Get value from query string (?postId=123) or route param (/:postId)\n//   console.log(router.query.postId);\n\n//   // Get current pathname\n//   console.log(router.pathname)\n\n//   // Navigate with with router.push()\n//   return (\n//     <button onClick={(e) => router.push('/about')}>About</button>\n//   );\n// }\n\n// Hook\nexport function useRouter() {\n    const params = useParams();\n    const location = useLocation();\n    const history = useHistory();\n    const match = useRouteMatch();\n\n    // Return our custom router object\n    // Memoize so that a new object is only returned if something changes\n    return useMemo(() => {\n        // const splitPath = location.pathname.split(\"/\")\n        return {\n            // For convenience add push(), replace(), pathname at top level\n            push: history.push,\n            replace: history.replace,\n            pathname: location.pathname,\n            // Merge params and parsed query string into single \"query\" object\n            // so that they can be used interchangeably.\n            // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n            query: {\n                ...queryString.parse(location.search), // Convert string to object\n                ...params\n            },\n            // Include match, location, history objects so we have\n            // access to extra React Router functionality if needed.\n            match,\n            location,\n            history\n        };\n    }, [params, match, location, history]);\n}\n","import queryString from \"query-string\";\n\nimport { countries } from \"../config\";\n\nconst validSearches = [\n    \"box\",\n    \"q\",\n    // \"name\",\n    \"tags\",\n    // \"layer\",\n    // \"slug\",\n    \"date\",\n    \"categories\",\n    \"type\",\n    \"date\",\n    // \"distributed\",\n    \"remote\",\n    \"country\"\n    // \"source\"\n];\n\nexport const boxQueryToArray = box => {\n    if (box) {\n        const s = box.split(\",\");\n        if (s.length === 4) {\n            return [\n                [parseFloat(s[1]), parseFloat(s[0])],\n                [parseFloat(s[3]), parseFloat(s[2])]\n            ];\n        }\n    }\n    return undefined;\n};\n\nexport const shortenBoxUrlParam = boxArray => {\n    if (boxArray) {\n        const s = boxArray.split(\",\");\n        return [\n            parseFloat(s[0]).toFixed(2),\n            parseFloat(s[1]).toFixed(2),\n            parseFloat(s[2]).toFixed(2),\n            parseFloat(s[3]).toFixed(2)\n        ].join(\",\");\n    }\n    return \"\";\n};\n\nexport const shortenBBoxStringToArray = box => {\n    if (box) {\n        const spl = box.split(\",\");\n        if (spl.length === 4) {\n            return spl.map(item => Math.round(Number(item) * 1e4) / 1e4);\n        }\n    }\n    return [];\n};\n\nexport const areBoundsEqual = (mapBounds, queryBounds) => {\n    if (mapBounds.length && queryBounds.length) {\n        return JSON.stringify(mapBounds) === JSON.stringify(queryBounds);\n    }\n    return false;\n};\n\nexport const validateCountryIso2 = input => {\n    return countries[input];\n};\n\nexport const updateCountryParam = (iso2, layer) => {\n    // returns updated pathname based on selected iso2 country code\n    return `/${iso2}/${layer}`;\n};\n\nexport const changeLayerRoute = (layer, queryObject) => {\n    // returns updated pathname based on selected layer\n    const result = { ...queryObject };\n    delete result[\"layer\"];\n    delete result[\"slug\"];\n    const st = queryString.stringify(result);\n    return `/${layer}?${st}`;\n};\n\nexport const stringifyQueryParams = queries => {\n    const result = { ...queries };\n    delete result[\"layer\"];\n    delete result[\"slug\"];\n    return queryString.stringify(result, { arrayFormat: \"none\" });\n};\n\nexport const getQueryCount = queryObject => {\n    const result = { ...queryObject };\n    delete result[\"layer\"];\n    delete result[\"slug\"];\n    delete result[\"box\"];\n    return Object.keys(result).length;\n};\n\nexport const resetQueryParams = queryObject => {\n    const { box } = queryObject;\n    return queryString.stringify({ box });\n};\n\nexport const validateSearches = queryObject => {\n    const result = { ...queryObject };\n    Object.keys(result).forEach(key => {\n        if (!validSearches.includes(key.toLowerCase())) {\n            delete result[key];\n        }\n    });\n    return result;\n};\n\nexport const parseQueryString = st => {\n    return queryString.parse(st, {\n        parseBooleans: true,\n        parseNumbers: true\n    });\n};\n\nexport const removeEmptyProperties = obj => {\n    Object.keys(obj).forEach(\n        k => !obj[k] && obj[k] !== undefined && delete obj[k]\n    );\n    return obj;\n};\n\nexport const removeEmptySearches = obj => {\n    if (obj.categories && !obj.categories.length) {\n        delete obj.categories;\n    }\n    if (obj.country && obj.country === \"any\") {\n        delete obj.country;\n    }\n    if (obj.date && obj.date === \"0\") {\n        delete obj.date;\n    }\n    if (obj.remote) {\n        delete obj.remote;\n    }\n    if (obj.q === \"\") {\n        delete obj.q;\n    }\n    if (obj.tags && !obj.tags.length) {\n        delete obj.tags;\n    }\n    return obj;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Input, Button, Icon, Row, Col, Tooltip, Switch } from \"antd\";\n\nimport { useRouter } from \"../../hooks/useRouter\";\n\nimport { parseJSON } from \"../../utils/misc\";\nimport { getTags, getCategories } from \"../../utils/http_functions\";\n\nimport {\n    resetQueryParams,\n    stringifyQueryParams,\n    parseQueryString,\n    removeEmptySearches\n} from \"../../utils/routing\";\n\nconst formItemLayout = {\n    labelCol: 8,\n    wrapperCol: 16\n};\n\nconst JobSearch = ({ isFetching, fetchData, form }) => {\n    const router = useRouter();\n\n    const initialValues = parseQueryString(router.location.search);\n\n    const { getFieldDecorator } = form;\n\n    // eslint-disable-next-line no-unused-vars\n    const [tags, setTags] = useState([]);\n\n    // eslint-disable-next-line no-unused-vars\n    const [categories, setCategories] = useState([]);\n\n    const handleSearch = values => {\n        values.box = router.query.box;\n        const search = stringifyQueryParams(values);\n        router.push({ search });\n        fetchData(values);\n    };\n\n    const handleSubmit = e => {\n        if (e) {\n            e.preventDefault();\n        }\n        form.validateFields((err, fieldsValue) => {\n            if (err) {\n                return;\n            }\n            const defaultsRemoved = removeEmptySearches(fieldsValue);\n            handleSearch(defaultsRemoved);\n        });\n    };\n\n    const handleReset = () => {\n        form.resetFields();\n        router.push({ search: resetQueryParams(router.query) });\n        const { box } = router.query;\n        fetchData({ box });\n    };\n\n    const populateTags = () => {\n        getTags()\n            .then(parseJSON)\n            .then(response => {\n                setTags(response.data);\n            })\n            .catch(error => {\n                // eslint-disable-next-line no-undef\n                console.log(\"get tags error: \", error);\n                setTags([]);\n            });\n    };\n\n    const populateCategories = () => {\n        getCategories()\n            .then(parseJSON)\n            .then(response => {\n                setCategories(response.data);\n            })\n            .catch(error => {\n                // eslint-disable-next-line no-undef\n                console.log(\"populate categories error: \", error);\n                setCategories([]);\n            });\n    };\n\n    useEffect(() => {\n        // handleTagSearch();\n        populateTags();\n        populateCategories();\n    }, []);\n    return (\n        <div style={{ width: \"275px\", textAlign: \"left\" }}>\n            <Form\n                onSubmit={handleSubmit}\n                {...formItemLayout}\n                labelAlign=\"left\"\n                size=\"small\"\n            >\n                <Row>\n                    <Col span={24}>\n                        <Form.Item style={{ marginBottom: \"10px\" }}>\n                            {getFieldDecorator(\"q\", {\n                                initialValue: initialValues.q\n                                    ? initialValues.q\n                                    : \"\",\n                                rules: [{ required: false }]\n                            })(\n                                <Input\n                                    placeholder=\"search term\"\n                                    size=\"large\"\n                                    disabled={isFetching}\n                                    suffix={<Icon type=\"search\" />}\n                                />\n                            )}\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={24}>\n                        <Form.Item\n                            labelCol={{ span: 20 }}\n                            wrapperCol={{ span: 4 }}\n                            style={{ marginBottom: \"20px\" }}\n                            label={\n                                <span>\n                                    List Only Mapped Jobs &nbsp;\n                                    <Tooltip title=\"This will not list Remote Jobs outside of the map window. Otherwise all Remote Jobs will display in the list.\">\n                                        <Icon type=\"info-circle-o\" />\n                                    </Tooltip>\n                                </span>\n                            }\n                        >\n                            {getFieldDecorator(\"remote\", {\n                                valuePropName: \"checked\",\n                                initialValue: initialValues.remote\n                                    ? initialValues.remote\n                                    : false,\n                                rules: [{ required: false }]\n                            })(<Switch onChange={() => handleSubmit()} />)}\n                        </Form.Item>\n                    </Col>\n                </Row>\n                {/* <Row style={{ display: expanded ? \"block\" : \"none\" }} gutter={[0, 0]}>\n          <Col span={24}>\n            <Form.Item label=\"Country\" style={{ margin: \"0\" }}>\n              {getFieldDecorator(\"country\", {\n                initialValue: initialValues.country\n                  ? initialValues.coutnry\n                  : \"any\",\n                rules: [{ required: false }]\n              })(\n                <Select showSearch onChange={handleCountryChange}>\n                  <Select.Option key=\"any\" value=\"any\">\n                    Any\n                  </Select.Option>\n                  {Object.keys(countries).map(key => {\n                    return (\n                      <Select.Option key={key} value={key}>\n                        <span className={`flag-icon flag-icon-${key}`} />{\" \"}\n                        {countries[key]}\n                      </Select.Option>\n                    );\n                  })}\n                </Select>\n              )}\n            </Form.Item>\n          </Col>\n          <Col span={24}>\n            <Form.Item\n              style={{ margin: \"0\" }}\n              label={\n                <span>\n                  Remote / Telecommute &nbsp;\n                  <Tooltip title=\"These results will not display on the map, only in the list.\">\n                    <Icon type=\"info-circle-o\" />\n                  </Tooltip>\n                </span>\n              }\n            >\n              {getFieldDecorator(\"remote\", {\n                initialValue: initialValues.remote\n                  ? initialValues.remote\n                  : \"include\",\n                rules: [{ required: false }]\n              })(\n                <Radio.Group onChange={handleRemoteRadioChange}>\n                  <Radio.Button value=\"include\">Include</Radio.Button>\n                  <Radio.Button value=\"exclude\">Exclude</Radio.Button>\n                  <Radio.Button value=\"only\">Only Remote</Radio.Button>\n                </Radio.Group>\n              )}\n            </Form.Item>\n          </Col>\n\n          <Col span={24} style={{ margin: 0, padding: 0 }}>\n            <Form.Item\n              style={{ margin: \"0\" }}\n              validateStatus={null}\n              label=\"Category\"\n            >\n              {getFieldDecorator(\"categories\", {\n                initialValue: initialValues.categories\n                  ? initialValues.categories\n                  : [],\n                rules: [\n                  {\n                    type: \"array\",\n                    required: false\n                  }\n                ]\n              })(\n                <Select\n                  getPopupContainer={triggerNode => triggerNode.parentNode}\n                  disabled={isFetching}\n                  placeholder=\"Any\"\n                  mode=\"multiple\"\n                >\n                  {categories.length\n                    ? categories.map(item => {\n                      return (\n                        <Option key={item.id} value={item.name}>\n                          {item.name}\n                        </Option>\n                      );\n                    })\n                    : null}\n                </Select>\n              )}\n            </Form.Item>\n          </Col>\n\n          <Col span={24}>\n            <Form.Item\n              style={{ margin: \"0\" }}\n              validateStatus={null}\n              label=\"Tags\"\n            >\n              {getFieldDecorator(\"tags\", {\n                initialValue: initialValues.tags ? initialValues.tags : [],\n                rules: [\n                  {\n                    type: \"array\",\n                    required: false\n                  }\n                ]\n              })(\n                <Select\n                  getPopupContainer={triggerNode => triggerNode.parentNode}\n                  disabled={isFetching}\n                  placeholder=\"Any\"\n                  mode=\"multiple\"\n                >\n                  {tags.length\n                    ? tags.map(item => {\n                      return (\n                        <Option key={item.id} value={item.name}>\n                          {item.name}\n                        </Option>\n                      );\n                    })\n                    : null}\n                </Select>\n              )}\n            </Form.Item>\n          </Col>\n\n          <Col span={24}>\n            <Form.Item\n              style={{ margin: \"0\", marginBottom: \"10px\" }}\n              validateStatus={null}\n              label=\"Date Posted\"\n            >\n              {getFieldDecorator(\"date\", {\n                initialValue: initialValues.date ? initialValues.date : \"0\",\n                rules: [{ required: false }]\n              })(\n                <Select\n                  disabled={isFetching}\n                  getPopupContainer={triggerNode => triggerNode.parentNode}\n                  onChange={handleDateChange}\n                  placeholder=\"All\"\n                >\n                  <Option value=\"0\">Any</Option>\n                  <Option value=\"1\">Past day</Option>\n                  <Option value=\"3\">Past 3 days</Option>\n                  <Option value=\"7\">Past week</Option>\n                  <Option value=\"14\">Past 2 weeks</Option>\n                  <Option value=\"30\">Past month</Option>\n                </Select>\n              )}\n            </Form.Item>\n          </Col>\n        </Row> */}\n\n                <Row>\n                    <Col span={8}>\n                        {/* <a\n              style={{ marginLeft: 8, fontSize: 12 }}\n              onClick={() => setExpanded(!expanded)}\n            >\n              Advanced <Icon type={expanded ? \"up\" : \"down\"} />\n            </a> */}\n                    </Col>\n                    <Col span={16} style={{ textAlign: \"right\" }}>\n                        <Button\n                            size=\"default\"\n                            onClick={handleReset}\n                            disabled={isFetching}\n                            style={{ marginRight: \"10px\" }}\n                        >\n                            Reset\n                        </Button>\n                        <Button\n                            size=\"default\"\n                            loading={isFetching}\n                            type=\"primary\"\n                            htmlType=\"submit\"\n                        >\n                            Apply\n                        </Button>\n                    </Col>\n                </Row>\n            </Form>\n        </div>\n    );\n};\n\nexport const WrappedJobSearchForm = Form.create({ name: \"search_form\" })(\n    JobSearch\n);\n","import React from \"react\";\nimport { Row, Col, Layout, Button, Badge, Popover } from \"antd\";\n\nimport { useRouter } from \"../../hooks/useRouter\";\nimport { WrappedJobSearchForm } from \"../JobSearch\";\nimport { getQueryCount } from \"../../utils/routing\";\nimport \"./Mobile.css\";\n\nexport const SidebarCollapased = ({ isFetching, data, fetchData }) => {\n    const router = useRouter();\n\n    return (\n        <Layout className=\"mobile-layout\">\n            {/* {props.children} */}\n            <div>\n                <Row\n                    gutter={0}\n                    style={{\n                        padding: \"15px 0\"\n                        // background:\"white\",\n                        // boxShadow: \"rgb(172, 172, 172) 0px 1px 4px 1px\"\n                    }}\n                >\n                    <Col style={{ textAlign: \"center\" }}>\n                        <div style={{ fontSize: \"small\" }}>Displaying</div>\n                        <div\n                            style={{\n                                fontWeight: \"600\",\n                                fontSize: \"2em\",\n                                whiteSpace: \"pre-wrap\"\n                            }}\n                        >\n                            {isFetching ? \" \" : data.length}\n                        </div>\n                        <div style={{ fontSize: \"small\" }}>jobs</div>\n\n                        {/* <Statistic title=\"Displaying\" value={isFetching ? '' : data.length} /> */}\n\n                        {/* {isFetching ? (\n              <Icon type=\"loading\" />\n            ) : (\n              )} */}\n                    </Col>\n                </Row>\n\n                <Row style={{ textAlign: \"center\" }}>\n                    <Badge\n                        count={getQueryCount(router.query)}\n                        style={{ background: \"#1890ff\" }}\n                    >\n                        <Popover\n                            placement=\"right\"\n                            // title={<span>Search</span>}\n                            content={\n                                <WrappedJobSearchForm\n                                    isFetching={isFetching}\n                                    fetchData={(layer, obj) =>\n                                        fetchData(layer, obj)\n                                    }\n                                />\n                            }\n                            trigger=\"click\"\n                        >\n                            <Button\n                                loading={isFetching}\n                                type=\"ghost\"\n                                icon=\"search\"\n                                shape=\"circle\"\n                            />\n                        </Popover>\n                    </Badge>\n                </Row>\n            </div>\n        </Layout>\n    );\n};\n","import React, { Fragment } from \"react\";\r\nimport { Row, Col, Typography, Tooltip } from \"antd\";\r\nimport \"flag-icon-css/css/flag-icon.css\";\r\nimport \"./NearestCity.css\";\r\nconst { Text } = Typography;\r\n\r\nexport const NearestCity = ({ near }) => {\r\n    const { properties } = near;\r\n    const displayString =\r\n        properties && properties.name ? (\r\n            <span>Near {`${properties.name}, ${properties.admin1}`}</span>\r\n        ) : (\r\n            \"\"\r\n        );\r\n    const countryDisplay =\r\n        properties && properties.iso2 ? (\r\n            <Tooltip title={`${properties.timezone} timezone`}>\r\n                {\" \"}\r\n                <span\r\n                    className={`near-flag flag-icon flag-icon-${properties.iso2.toLowerCase()}`}\r\n                />\r\n            </Tooltip>\r\n        ) : (\r\n            \"\"\r\n        );\r\n\r\n    return (\r\n        <Fragment>\r\n            <Row>\r\n                <Col\r\n                    span={24}\r\n                    style={{\r\n                        textAlign: \"center\",\r\n                        fontSize: \".95em\"\r\n                    }}\r\n                >\r\n                    <Text ellipsis style={{ maxWidth: \"250px\" }}>\r\n                        {displayString}\r\n                    </Text>\r\n                    &nbsp;&nbsp;{countryDisplay}\r\n                </Col>\r\n            </Row>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport { Row, Col, List, Icon, Typography, Tooltip } from \"antd\";\r\n\r\nimport { getRelativeTime } from \"../../utils/misc\";\r\n\r\nconst { Text } = Typography;\r\n\r\nexport const ListItem = props => {\r\n    const { properties, geometry } = props.item;\r\n\r\n    const relTime = properties.publishDate\r\n        ? getRelativeTime(properties.publishDate)\r\n        : null;\r\n\r\n    // Indeed job source\r\n    return (\r\n        <Fragment>\r\n            <List.Item.Meta\r\n                // avatar={properties.logo ? <Avatar src={properties.logo} /> : null}\r\n                title={\r\n                    <Row>\r\n                        <Col span={14}>\r\n                            <Text ellipsis style={{ maxWidth: \"200px\" }}>\r\n                                {properties.title}\r\n                            </Text>\r\n                        </Col>\r\n                        <Col\r\n                            span={10}\r\n                            style={{\r\n                                fontSize: \"12px\",\r\n                                textAlign: \"right\",\r\n                                color:\r\n                                    relTime.toLowerCase() === \"today\"\r\n                                        ? \"#0066ff\"\r\n                                        : \"rgba(0, 0, 0, 0.45)\"\r\n                            }}\r\n                        >\r\n                            {relTime}\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                description={\r\n                    <Row>\r\n                        <Col span={14}>\r\n                            <Text ellipsis style={{ maxWidth: \"200px\" }}>\r\n                                {properties.company}\r\n                            </Text>\r\n                        </Col>\r\n                        <Col\r\n                            span={10}\r\n                            style={{ fontSize: \"12px\", textAlign: \"right\" }}\r\n                        >\r\n                            <Text ellipsis style={{ maxWidth: \"130px\" }}>\r\n                                {properties.isRemote ? (\r\n                                    <span>\r\n                                        <Tooltip title=\"Remote Job\">\r\n                                            <Icon\r\n                                                type=\"home\"\r\n                                                style={{ color: \"#FC7307\" }}\r\n                                            />{\" \"}\r\n                                            &nbsp;\r\n                                        </Tooltip>\r\n                                    </span>\r\n                                ) : null}\r\n                                {geometry.coordinates ? (\r\n                                    <span>\r\n                                        <Icon type=\"environment-o\" /> &nbsp;\r\n                                        {properties.formattedLocation}\r\n                                    </span>\r\n                                ) : null}\r\n                            </Text>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport { Row, Col, List, Icon, Typography, Tag, Tooltip } from \"antd\";\r\n\r\nimport { getRelativeTime } from \"../../utils/misc\";\r\n\r\nconst { Text } = Typography;\r\n\r\nconst CategoriesRow = ({ cat }) => (\r\n    <div style={{ margin: \"5px 0\" }}>\r\n        {cat.map(c => {\r\n            return (\r\n                <Tag key={c.id} color=\"blue\">\r\n                    {c.name}\r\n                </Tag>\r\n            );\r\n        })}\r\n    </div>\r\n);\r\n\r\nexport const ListItemSponsored = props => {\r\n    const { properties, geometry } = props.item;\r\n    const { categories } = properties;\r\n\r\n    const relTime = properties.publishDate\r\n        ? getRelativeTime(properties.publishDate)\r\n        : null;\r\n\r\n    return (\r\n        <Fragment>\r\n            <List.Item.Meta\r\n                // avatar={properties.logo ? <Avatar src={properties.logo} /> : null}\r\n                title={\r\n                    <Row>\r\n                        <Col span={14}>\r\n                            <Text ellipsis style={{ maxWidth: \"200px\" }}>\r\n                                {properties.title}\r\n                            </Text>\r\n                        </Col>\r\n                        <Col\r\n                            span={10}\r\n                            style={{\r\n                                fontSize: \"12px\",\r\n                                textAlign: \"right\",\r\n                                color:\r\n                                    relTime.toLowerCase() === \"today\"\r\n                                        ? \"#0066ff\"\r\n                                        : \"rgba(0, 0, 0, 0.45)\"\r\n                            }}\r\n                        >\r\n                            {relTime}\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                description={\r\n                    <Fragment>\r\n                        <Row>\r\n                            <Col span={14}>\r\n                                <Text ellipsis style={{ maxWidth: \"200px\" }}>\r\n                                    {properties.company}\r\n                                </Text>\r\n                            </Col>\r\n                            <Col\r\n                                span={10}\r\n                                style={{ fontSize: \"12px\", textAlign: \"right\" }}\r\n                            >\r\n                                <Text ellipsis style={{ maxWidth: \"130px\" }}>\r\n                                    {properties.isRemote ? (\r\n                                        <span>\r\n                                            <Tooltip title=\"Remote Job\">\r\n                                                <Icon type=\"home\" /> &nbsp;\r\n                                                Remote\r\n                                            </Tooltip>\r\n                                        </span>\r\n                                    ) : null}\r\n                                    {geometry && geometry.coordinates ? (\r\n                                        <span>\r\n                                            <Icon type=\"environment-o\" /> &nbsp;\r\n                                            {properties.formattedLocation}\r\n                                        </span>\r\n                                    ) : null}\r\n                                </Text>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <CategoriesRow cat={categories} />\r\n                        </Row>\r\n                        <Row>\r\n                            <div\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    fontSize: \"x-small\"\r\n                                }}\r\n                            >\r\n                                Sponsored Listing\r\n                            </div>\r\n                        </Row>\r\n                    </Fragment>\r\n                }\r\n            />\r\n        </Fragment>\r\n    );\r\n};\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { List } from \"antd\";\n\nimport { getRelativeTime } from \"../../utils/misc\";\nimport { fetchDetail } from \"../../modules/detail\";\nimport { ListItem } from \"../ListItem\";\nimport { ListItemSponsored } from \"../ListItemSponsored\";\n\nconst ListJobs = props => {\n    const handleClick = slug => {\n        props.fetchDetail(slug);\n    };\n    const { item } = props;\n    const { properties, geometry } = item;\n    const relTime = properties.publishDate\n        ? getRelativeTime(properties.publishDate)\n        : null;\n\n    const { title, dataSource } = properties;\n\n    if (relTime) {\n        return (\n            <List.Item\n                className=\"data-list-item\"\n                key={properties.slug}\n                onMouseEnter={() => props.handleMapHighlight(geometry, title)}\n                onMouseLeave={() => props.handleMapHighlight()}\n                onClick={() => handleClick(properties.slug)}\n            >\n                {dataSource === \"gjm\" ? (\n                    <ListItemSponsored item={item} />\n                ) : (\n                    <ListItem item={item} />\n                )}\n            </List.Item>\n        );\n    }\n\n    return <div />;\n};\n\nconst mapStateToProps = ({ detail }) => ({\n    detail\n});\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            fetchDetail\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ListJobs);\n","import React, { useState, useEffect, useRef } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport {\n    Layout,\n    Row,\n    Button,\n    Col,\n    Typography,\n    Tooltip,\n    List,\n    Spin,\n    Icon,\n    Badge,\n    Popover\n} from \"antd\";\n\nimport { WrappedJobSearchForm } from \"../JobSearch\";\nimport { NearestCity } from \"../NearestCity\";\nimport { getQueryCount } from \"../../utils/routing\";\n\nimport { useRouter } from \"../../hooks/useRouter\";\n\nimport \"./style.css\";\n\nimport ListJobs from \"../ListJobs\";\n\nconst { Text } = Typography;\n\nexport const SidebarOpened = ({\n    data,\n    near,\n    fetchData,\n    isFetching,\n    toggleHighlightMarker,\n    handleClick\n}) => {\n    const router = useRouter();\n\n    const infiniteParentRef = useRef(null);\n\n    const scrollAmount = 10;\n\n    const [listData, setListData] = useState([]);\n\n    const [listIdx, setListIdx] = useState(scrollAmount);\n\n    const handleInfiniteOnLoad = () => {\n        if (listData.length >= data.length) {\n            return;\n        }\n        if (data.length) {\n            setListData(\n                listData.concat(data.slice(listIdx + 1, listIdx + scrollAmount))\n            );\n            setListIdx(listIdx + scrollAmount);\n        }\n    };\n\n    useEffect(() => {\n        if (!isFetching) {\n            if (infiniteParentRef && infiniteParentRef.current) {\n                infiniteParentRef.current.scrollTop = 0;\n            }\n            setListIdx(scrollAmount);\n            setListData(data.slice(0, scrollAmount + 1));\n        }\n    }, [isFetching]);\n\n    return (\n        <Layout style={{ height: \"100%\", minHeight: \"100%\" }}>\n            <Row\n                gutter={0}\n                style={{\n                    padding: \"8px 0\",\n                    // marginTop: '3px',\n                    backgroundColor: \"whitesmoke\",\n                    boxShadow: \"rgb(172, 172, 172) 0px 1px 4px 1px\",\n                    zIndex: \"1\",\n                    minHeight: \"75px\"\n                }}\n            >\n                <Row style={{ padding: \"5px\" }}>\n                    <Col span={19} style={{ textAlign: \"center\" }}>\n                        <Row gutter={0}>\n                            <Col span={24} style={{ marginBottom: \"5px\" }}>\n                                {!isFetching && data && data.length === 100 ? (\n                                    <Tooltip\n                                        placement=\"bottom\"\n                                        title=\"Max 100 results. Narrow your search criteria or zoom in on the map.\"\n                                    >\n                                        <Icon\n                                            type=\"info-circle\"\n                                            style={{\n                                                // color: \"orange\",\n                                                margin: \"0 10px\",\n                                                fontSize: \"18px\",\n                                                verticalAlign: \"text-bottom\"\n                                            }}\n                                        />\n                                    </Tooltip>\n                                ) : null}\n\n                                {!isFetching && (\n                                    <Text strong>\n                                        Displaying Latest{\" \"}\n                                        {data && data.length ? data.length : 0}{\" \"}\n                                        Jobs\n                                    </Text>\n                                )}\n                            </Col>\n                            <Col span={24} style={{ marginTop: \"5px\" }}>\n                                <NearestCity near={near} />\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col\n                        span={5}\n                        style={{\n                            textAlign: \"center\",\n                            marginTop: \"10px\"\n                        }}\n                    >\n                        <Badge\n                            count={getQueryCount(router.query)}\n                            style={{ background: \"#1890ff\" }}\n                        >\n                            <Popover\n                                placement=\"right\"\n                                content={\n                                    <WrappedJobSearchForm\n                                        isFetching={isFetching}\n                                        fetchData={(layer, obj) =>\n                                            fetchData(layer, obj)\n                                        }\n                                    />\n                                }\n                                trigger=\"click\"\n                            >\n                                <Button\n                                    loading={isFetching}\n                                    icon=\"search\"\n                                    shape=\"circle\"\n                                />\n                            </Popover>\n                        </Badge>\n                    </Col>\n                </Row>\n            </Row>\n            <div\n                style={{\n                    overflowY: \"scroll\",\n                    height: \"100%\",\n                    background: \"white\"\n                }}\n                ref={infiniteParentRef}\n            >\n                {isFetching && (\n                    <div className=\"list-loading-container\">\n                        <Spin />\n                    </div>\n                )}\n                <InfiniteScroll\n                    initialLoad={false}\n                    pageStart={0}\n                    loadMore={handleInfiniteOnLoad}\n                    hasMore={listData.length < data.length}\n                    useWindow={false}\n                >\n                    <List\n                        dataSource={listData}\n                        locale={{\n                            emptyText: (\n                                <span>\n                                    {isFetching\n                                        ? \"Please wait...\"\n                                        : \"No results found here.\"}\n                                </span>\n                            )\n                        }}\n                        renderItem={item => (\n                            <ListJobs\n                                item={item}\n                                handleClick={handleClick}\n                                handleMapHighlight={toggleHighlightMarker}\n                            />\n                        )}\n                    />\n                </InfiniteScroll>\n            </div>\n        </Layout>\n    );\n};\n","import React, { createContext, useState } from \"react\";\n\nexport const SideBarContext = createContext();\n\nfunction SidebarContextProvider({ children }) {\n    const getSize = () => {\n        return window.innerWidth > 700;\n    };\n\n    const checkDevice = () => {\n        const windowWidth =\n            window.screen.width < window.outerWidth\n                ? window.screen.width\n                : window.outerWidth;\n        const mobile = windowWidth < 500;\n        return mobile;\n    };\n\n    const [isSidebarOpen, setSidebarOpen] = useState(getSize());\n\n    const isMobile = checkDevice();\n\n    return (\n        <SideBarContext.Provider\n            value={{\n                isSidebarOpen,\n                setSidebarOpen,\n                isMobile\n            }}\n        >\n            {children}\n        </SideBarContext.Provider>\n    );\n}\nexport default SidebarContextProvider;\n","import React, { useContext } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { Layout, Icon } from \"antd\";\n\nimport { useWindowSize } from \"../../hooks/useWindowSize\";\n\nimport { SidebarCollapased } from \"../SidebarCollapased\";\n\nimport { SidebarOpened } from \"../SidebarOpened\";\n\nimport { toggleHighlightMarker } from \"../../modules/highlightMarker\";\n\nimport { SideBarContext } from \"../../contexts/SidebarContext\";\n\nimport { fetchData } from \"../../modules/data\";\n\nimport \"./style.css\";\n\nconst { Sider, Content, Footer } = Layout;\n\nconst SidebarContainer = ({\n    children,\n    fetchData: searchFetch,\n    data,\n    toggleHighlightMarker: toggleMarker\n}) => {\n    const windowSize = useWindowSize();\n\n    const { isSidebarOpen, setSidebarOpen, isMobile } = useContext(\n        SideBarContext\n    );\n\n    const getTriggerNode = () => {\n        let nodeType = null;\n        let nodeText = \"\";\n\n        if (isSidebarOpen) {\n            nodeType = \"left\";\n            if (isMobile) {\n                nodeText = \" Show Map\";\n            } else {\n                nodeText = \" More Map\";\n            }\n        } else {\n            nodeType = \"right\";\n        }\n        return (\n            <span>\n                <Icon type={nodeType} />\n                {nodeText}\n            </span>\n        );\n    };\n\n    return (\n        <Sider\n            collapsible\n            collapsed={!isSidebarOpen}\n            // onCollapse={() => setSidebarOpen(!isSidebarOpen)}\n            width={windowSize < 700 ? windowSize.innerWidth : 375}\n            style={{\n                position: windowSize.innerWidth < 700 ? \"fixed\" : \"relative\",\n                zIndex: \"500\",\n                top: \"49px\",\n                left: 0,\n                // height: windowSize.innerHeight - 49,\n                marginLeft: 0,\n                height: \"calc(100vh - 49px\",\n                boxShadow: \"2px 1px 5px 0 rgba(0,0,0,.4)\",\n                overflow: \"hidden\"\n            }}\n            theme=\"light\"\n            breakpoint=\"lg\"\n            collapsedWidth=\"80\"\n            trigger={null}\n        >\n            <Layout style={{ height: \"100%\" }}>\n                <Content\n                    style={{\n                        background: \"#fff\",\n                        padding: 0,\n                        margin: 0,\n                        height: \"100%\"\n                    }}\n                >\n                    {children}\n                    {isSidebarOpen ? (\n                        <SidebarOpened\n                            // visibleCount={sidebar.visibleJobs.length}\n                            data={data.features || []}\n                            near={data.near || {}}\n                            fetchData={searchFetch}\n                            isFetching={data.isFetching}\n                            toggleHighlightMarker={toggleMarker}\n                            // handleClick={(g)=>handleClick(g)}\n                            // extent={() => goToExtent()}\n                        />\n                    ) : (\n                        <SidebarCollapased\n                            fetchData={searchFetch}\n                            data={data.features}\n                            isFetching={data.isFetching}\n                            // extent={() => goToExtent()}\n                        />\n                    )}\n                </Content>\n                <Footer\n                    style={{\n                        padding: \"10px\",\n                        textAlign: \"center\",\n                        borderTop: \"1px solid #acacac\",\n                        cursor: \"pointer\",\n                        background: \"whitesmoke\"\n                    }}\n                    onClick={() => setSidebarOpen(!isSidebarOpen)}\n                >\n                    {getTriggerNode()}\n                </Footer>\n            </Layout>\n        </Sider>\n    );\n};\n\nconst mapStateToProps = ({ data }) => ({\n    data\n});\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            toggleHighlightMarker,\n            fetchData\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarContainer);\n","import { useState, useEffect } from \"react\";\n\n// Hook\nexport function useWindowSize() {\n    const getSize = () => {\n        return {\n            width: window.innerWidth,\n            height: window.innerHeight\n        };\n    };\n\n    const [windowSize, setWindowSize] = useState(getSize);\n\n    useEffect(() => {\n        const handleResize = () => {\n            setWindowSize(getSize());\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        };\n    }, []);\n\n    return windowSize;\n}\n","import React from \"react\";\n\nimport { getRelativeTime } from \"../../../utils/misc\";\n\nimport { Icon, Row, Col, Typography, Tag, Button } from \"antd\";\n\nconst { Text } = Typography;\n\nexport const Header = props => {\n    const { source, isRemote } = props;\n\n    let relTime = getRelativeTime(props.publishDate).toLowerCase();\n    if (props.title) {\n        return (\n            <Row gutter={24}>\n                <Col span={24}>\n                    <h1>{props.title}</h1>\n                </Col>\n\n                <Col span={24} style={{ marginBottom: \"10px\" }}>\n                    <h2>{props.company}</h2>\n                </Col>\n\n                <Col span={24} style={{ marginBottom: \"20px\" }}>\n                    <Text strong>\n                        <Icon type=\"environment-o\" /> {props.formattedLocation}\n                    </Text>\n                    {isRemote ? (\n                        <Text strong>\n                            &nbsp;/&nbsp;\n                            <Icon type=\"home\" />\n                            &nbsp;Remote\n                        </Text>\n                    ) : null}\n                    <Text>&nbsp;-&nbsp;posted&nbsp;{relTime}</Text>\n                </Col>\n\n                {props.source === \"gjm\" && props.categories.length && (\n                    <Col span={24} style={{ marginBottom: \"20px\" }}>\n                        Categorized as &nbsp;\n                        {props.categories.map(item => {\n                            return (\n                                <Tag key={item.id} color=\"volcano\">\n                                    {item.name}\n                                </Tag>\n                            );\n                        })}\n                    </Col>\n                )}\n\n                <Col span={24}>\n                    Tagged with &nbsp;\n                    {props.tags.length ? (\n                        props.tags.map(item => {\n                            return (\n                                <Tag key={item.id} color=\"geekblue\">\n                                    {item.name}\n                                </Tag>\n                            );\n                        })\n                    ) : (\n                        <Text type=\"secondary\">No tags found</Text>\n                    )}\n                </Col>\n                {props.url && (\n                    <Col span={24} style={{ marginTop: \"20px\" }}>\n                        <a\n                            href={props.url}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <Button type=\"link\" size=\"small\">\n                                <Icon type=\"link-o\" />\n                                {source === \"indeed\"\n                                    ? \" View on Indeed\"\n                                    : \" More Information\"}\n                            </Button>\n                        </a>\n                    </Col>\n                )}\n            </Row>\n        );\n    }\n};\n","import React, { useState } from \"react\";\nimport { Tag, Icon, Divider, Input, Button } from \"antd\";\n\nexport const Share = ({ slug, title, tags }) => {\n    const [copyIcon, setCopyIcon] = useState(\"link-o\");\n\n    const doLinkCopy = link => {\n        navigator.clipboard.writeText(link);\n        setCopyIcon(\"check-o\");\n        setTimeout(() => {\n            setCopyIcon(\"link-o\");\n        }, 1000);\n    };\n\n    const baseUrl = window.location.origin;\n    const shareLink = `${baseUrl}/job/${slug}`;\n    const hashTags = tags.length ? tags.map(item => item.name).join(\",\") : \"\";\n\n    const twitterShareLink =\n        `https://twitter.com/intent/tweet` +\n        `?url=${encodeURIComponent(shareLink)}` +\n        `&text=${encodeURIComponent(title)}` +\n        `&hashTags=${encodeURIComponent(hashTags)}`;\n\n    const facebookShareLink =\n        `https://www.facebook.com/sharer.php` +\n        `?u=${encodeURIComponent(shareLink)}`;\n\n    const linkedInShareLink =\n        `https://www.linkedin.com/shareArticle` +\n        `?mini=true` +\n        `&url=${encodeURIComponent(shareLink)}` +\n        `&title=${encodeURIComponent(title)}` +\n        `&summary=${encodeURIComponent(hashTags)}` +\n        `&source=${encodeURIComponent(\"The GIS Jobs Map\")}`;\n\n    return (\n        <div style={{ margin: \"30px 0\" }}>\n            Share &nbsp;\n            <Tag color=\"#55acee\">\n                <a\n                    href={twitterShareLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Icon type=\"twitter-o\" color=\"white\" />\n                </a>\n            </Tag>\n            <Tag color=\"#3b5999\">\n                <a\n                    href={facebookShareLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Icon type=\"facebook-o\" color=\"white\" />{\" \"}\n                </a>\n            </Tag>\n            <Tag color=\"#0077b5\">\n                <a\n                    href={linkedInShareLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Icon type=\"linkedin-o\" color=\"white\" />\n                </a>\n            </Tag>\n            <Tag>\n                <a\n                    href={`mailto:?subject=${title}%20Job&body=Check out this job from the GIS Jobs Map: \\r \\n ${encodeURIComponent(\n                        shareLink\n                    )}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <Icon type=\"mail-o\" color=\"white\" />\n                </a>\n            </Tag>\n            <Divider type=\"vertical\" />\n            <span style={{ marginLeft: \"8px\" }}>\n                <Input\n                    size=\"small\"\n                    placeholder=\"\"\n                    value={shareLink}\n                    style={{ maxWidth: \"300px\", marginRight: \"5px\" }}\n                    prefix={\n                        <Icon\n                            type={copyIcon}\n                            color={copyIcon === \"check-o\" ? \"green\" : \"inherit\"}\n                        />\n                    }\n                />\n                <Button size=\"small\" onClick={() => doLinkCopy(shareLink)}>\n                    Copy\n                </Button>\n            </span>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Modal, Icon, Typography, Divider } from \"antd\";\n\nimport { useRouter } from \"../../hooks/useRouter\";\nimport { fetchDetail, closeDetail } from \"../../modules/detail\";\nimport { Header } from \"../JobDetail/Header\";\nimport { Share } from \"./Share\";\nimport \"./style.css\";\n\nconst { Paragraph, Text } = Typography;\n\nconst JobDetail = ({ detail, closeDetail, fetchDetail }) => {\n    const router = useRouter();\n\n    const { match } = router;\n    const { isFetching, data, slug } = detail;\n\n    const {\n        url,\n        description,\n        formattedLocation,\n        dataSource,\n        company,\n        publishDate,\n        tags,\n        categories,\n        title,\n        isRemote\n    } = data.properties;\n\n    useEffect(() => {\n        if (!slug && match.params.layer === \"job\" && match.params.slug) {\n            fetchDetail(match.params.slug);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (slug) {\n            router.push({\n                pathname: `/job/${slug}`,\n                search: router.location.search\n            });\n        }\n    }, [slug]);\n\n    const closeModal = () => {\n        router.push({ pathname: `/`, search: router.location.search });\n        closeDetail();\n    };\n\n    return (\n        <Modal\n            title={null}\n            visible={slug ? true : false}\n            onCancel={() => closeModal()}\n            bodyStyle={{ paddingTop: \"50px\" }}\n            footer={null}\n            style={{ top: 50 }}\n            width=\"calc(100% - 100px)\"\n        >\n            {isFetching ? (\n                <div className=\"loading-div\">\n                    <Icon type=\"loading\" /> Loading\n                </div>\n            ) : (\n                <>\n                    <Header\n                        title={title}\n                        company={company}\n                        publishDate={publishDate}\n                        formattedLocation={formattedLocation}\n                        source={dataSource}\n                        url={url}\n                        tags={tags}\n                        categories={categories}\n                        isRemote={isRemote}\n                    />\n                    <Divider />\n                    <Share slug={slug} title={title} tags={tags} />\n\n                    <Paragraph className=\"job-description\">\n                        <div style={{ margin: \"20px 0\" }}>\n                            <Text strong>Description</Text>\n                        </div>\n                        {description}\n                    </Paragraph>\n                </>\n            )}\n        </Modal>\n    );\n};\n\nconst mapStateToProps = ({ detail }) => ({\n    detail\n});\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            fetchDetail,\n            closeDetail\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobDetail);\n","import L from \"leaflet\";\nimport { withLeaflet, MapLayer } from \"react-leaflet\";\n\nrequire(\"leaflet.markercluster\");\n\nrequire(\"leaflet.markercluster/dist/MarkerCluster.Default.css\");\n\nclass MarkerClusterGroup extends MapLayer {\n    createLeafletElement(props) {\n        const el = new L.markerClusterGroup(props); // eslint-disable-line\n        this.contextValue = {\n            ...props.leaflet,\n            layerContainer: el\n        };\n        return el;\n    }\n}\n\nexport default withLeaflet(MarkerClusterGroup);\n","import React from \"react\";\nimport { Marker, Tooltip } from \"react-leaflet\";\n\nimport MarkerClusterGroup from \"../MarkerClusterGroup\";\n\nexport const JobClusters = ({ mapFeatures, markerClick }) => {\n    return (\n        <MarkerClusterGroup chunkedLoading chunkInterval={100}>\n            {mapFeatures &&\n                mapFeatures.map(item => {\n                    if (item.geometry && !item.invalidGeom) {\n                        return (\n                            <Marker\n                                onClick={e => markerClick(e)}\n                                key={item.properties.slug}\n                                title={item.properties.title}\n                                publishDate={item.properties.publishDate}\n                                company={item.properties.company}\n                                formattedLocation={\n                                    item.properties.formattedLocation\n                                }\n                                slug={item.properties.slug}\n                                country={item.properties.country}\n                                position={[\n                                    item.geometry.coordinates[1],\n                                    item.geometry.coordinates[0]\n                                ]}\n                            >\n                                <Tooltip\n                                    label={item.properties.title}\n                                    direction=\"top\"\n                                >\n                                    <span>{item.properties.title}</span>\n                                </Tooltip>\n                            </Marker>\n                        );\n                    }\n                    return null;\n                })}\n        </MarkerClusterGroup>\n    );\n};\n","import React, { useEffect, useState, useRef, useMemo, useContext } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport {\n    Map,\n    TileLayer,\n    ZoomControl,\n    FeatureGroup,\n    CircleMarker,\n    GeoJSON,\n    AttributionControl\n} from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./map.css\";\n\nimport {\n    boxQueryToArray,\n    shortenBoxUrlParam,\n    stringifyQueryParams,\n    validateSearches\n} from \"../../utils/routing\";\nimport { basemapProvider } from \"../../config\";\nimport { fetchData } from \"../../modules/data\";\nimport { fetchDetail } from \"../../modules/detail\";\n\nimport { toggleHighlightMarker } from \"../../modules/highlightMarker\";\n\nimport { useRouter } from \"../../hooks/useRouter\";\nimport { SideBarContext } from \"../../contexts/SidebarContext\";\nimport { JobClusters } from \"../JobClusters\";\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"), // eslint-disable-line global-require\n    iconUrl: require(\"leaflet/dist/images/marker-icon.png\"), // eslint-disable-line global-require\n    shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\") // eslint-disable-line global-require\n});\n\nconst initialBounds = [\n    [29.63, -116.88],\n    [48.22, -76.87]\n];\n\nconst LeafletMap = ({\n    detail,\n    data,\n    fetchData,\n    fetchDetail,\n    highlightMarker\n}) => {\n    const router = useRouter();\n    const { match } = router;\n    const startBoxQuery = boxQueryToArray(router.query.box);\n\n    const box = startBoxQuery ? startBoxQuery : initialBounds;\n\n    const { isSidebarOpen, isMobile } = useContext(SideBarContext);\n\n    // eslint-disable-next-line no-unused-vars\n    const [mapBounds, setMapBounds] = useState(box);\n\n    // eslint-disable-next-line no-unused-vars\n    const [crosshairVisible, setCrosshairVisible] = useState([]);\n\n    const [hasJobDetailOnLoad, setHasJobDetailOnLoad] = useState(false);\n\n    const mapRef = useRef(null);\n    const jobFeatureGroupRef = useRef(null);\n\n    // const handleGeocodeChange = (value) => {\n    //   setGeocodeValue(value)\n    //   if (value) {\n    //     const params = {\n    //       text: value,\n    //       iso2: country\n    //     };\n    //     fetchGeocode(params)\n    //   }\n    // }\n    const { features } = data;\n\n    const onMarkerClick = e => {\n        const { slug } = e.target.options;\n        fetchDetail(slug);\n    };\n\n    // const onMoveStart = e => {\n    //     setCrosshairVisible(true);\n    // };\n\n    const onMoveEnd = e => {\n        const map = e.target;\n        console.log(\"map\", map);\n        if (map) {\n            setCrosshairVisible(false);\n            const bounds = map.getBounds();\n            var min = bounds.getSouthWest().wrap();\n            var max = bounds.getNorthEast().wrap();\n            let boundsString = `${min.lng},${min.lat},${max.lng},${max.lat}`;\n            boundsString = bounds.toBBoxString();\n            const urlBoxParam = shortenBoxUrlParam(boundsString);\n            const { query } = router;\n            const newQueries = {\n                ...validateSearches(query),\n                ...{ box: urlBoxParam }\n            };\n\n            const search = stringifyQueryParams(newQueries);\n            router.push({ search });\n            fetchData(newQueries);\n        }\n    };\n\n    // const setFullExtent = () => {\n    //   console.log(\"set full extent\");\n    //   if (mapRef && jobFeatureGroupRef.current && features.length) {\n    //     const mapBounds = jobFeatureGroupRef.current.leafletElement.getBounds();\n    //     if (mapBounds.isValid()) {\n    //       mapRef.leafletElement.fitBounds(mapBounds);\n    //     }\n    //   }\n    // };\n\n    // const goToGeocode = () =>{\n    //   const { coords } = geocode\n    //   if (coords.length) {\n    //     mapRef.current.leafletElement.setView(new L.LatLng(coords[1], coords[0]), 11);\n    //   }\n    // }\n\n    // toggle map window size with sidebar change\n\n    useEffect(() => {\n        if (mapRef && mapRef.current) {\n            setTimeout(() => {\n                mapRef.current.leafletElement.invalidateSize();\n            }, 200);\n        }\n    }, [isSidebarOpen]);\n\n    // useEffect(() => {\n    //   const { layer } = router.query\n    //   getData(layer, router.query);\n    // }, [router.query]);\n\n    // highlight marker on sidebar hover\n    useEffect(() => {\n        if (mapRef.current) {\n            if (highlightMarker.geometry.coordinates) {\n                L.popup({\n                    closeButton: false,\n                    autoPan: false,\n                    offset: [0, -15]\n                })\n                    .setLatLng([\n                        highlightMarker.geometry.coordinates[1],\n                        highlightMarker.geometry.coordinates[0]\n                    ])\n                    .setContent(highlightMarker.title)\n                    .openOn(mapRef.current.leafletElement);\n            } else {\n                mapRef.current.leafletElement.closePopup();\n            }\n        }\n    }, [highlightMarker]);\n\n    // memoized to prevent unecessary rerendering\n    const jobClustersMemo = useMemo(() => {\n        return (\n            <JobClusters markerClick={onMarkerClick} mapFeatures={features} />\n        );\n    }, [features]);\n\n    useEffect(() => {\n        if (match.params.layer === \"job\" && match.params.slug) {\n            setHasJobDetailOnLoad(true);\n        } else if (mapRef && mapRef.current) {\n            mapRef.current.leafletElement.fitBounds(mapBounds);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (\n            !detail.isFetching &&\n            detail.data.geometry.coordinates &&\n            hasJobDetailOnLoad\n        ) {\n            setHasJobDetailOnLoad(false);\n            const { coordinates } = detail.data.geometry;\n            mapRef.current.leafletElement.setView(\n                [coordinates[1], coordinates[0]],\n                10\n            );\n        }\n    }, [detail.isFetching]);\n\n    // memoized to prevent unecessary rerendering\n    // const organizationsClustersMemo = useMemo(() => {\n    //   return (\n    //     <OrganizationClusters\n    //       markerClick={onMarkerClick}\n    //       mapFeatures={features}\n    //     />\n    //   );\n    // }, [features]);\n\n    //   const geocoderMemo = useMemo(() => {\n    //   return (\n    //     <Geocoder\n    //     value={geocodeValue}\n    //     handleSelect={(e) => setGeocode(e)}\n    //     handleChange={(e) => handleGeocodeChange(e)}\n    //     searching={geocode.isFetching}\n    //     options={geocode.results}\n    //   />\n    //   )\n    // }, [geocodeValue, geocode]);\n\n    // const onMapReady = (e) => {\n    // console.log('e', e)\n    // console.log('t', t)\n    // console.log('e', e)\n    // console.log('e', e)\n    // setTimeout(function () { e.target.invalidateSize() }, 400);\n    // e.resize()\n    // }\n\n    const mapStyle = {\n        position: isMobile ? \"fixed\" : \"relative\",\n        width: isMobile ? \"calc(100vw - 80px)\" : \"100%\",\n        left: isMobile ? \"80px\" : \"0\",\n        height: \"calc(100vh - 50px)\",\n        marginTop: \"50px\",\n        zIndex: \"1\"\n    };\n\n    return (\n        <div style={mapStyle}>\n            <Map\n                className=\"leaflet-map\"\n                zoomControl={false}\n                onMoveEnd={onMoveEnd}\n                // onMoveStart={onMoveStart}\n                maxZoom={12}\n                zoom={1}\n                center={{ lat: 51, lng: 0 }}\n                attributionControl={false}\n                // bounds={mapBounds}\n                boundsOptions={{ padding: [50, 50] }}\n                ref={mapRef}\n                // whenReady={onMapReady}\n                // crs={L.CRS.EPSG4326}\n                worldCopyJump\n            >\n                <AttributionControl\n                    position=\"bottomright\"\n                    prefix=\"Built by <a href='http://ian.shi.land' target='_blank'>http://ian.shi.land</a>\"\n                />\n                {/* <div className='crosshair' style={{ visibility: crosshairVisible ? 'visible' : 'hidden' }}>\n          <Icon\n            type=\"plus\"\n          />\n        </div> */}\n\n                <TileLayer\n                    attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url={basemapProvider}\n                    // url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n\n                <ZoomControl position=\"bottomright\" />\n\n                <FeatureGroup ref={jobFeatureGroupRef}>\n                    {jobClustersMemo}\n                </FeatureGroup>\n\n                {data.country &&\n                data.country.geom.coordinates &&\n                data.country.geom.coordinates.length ? (\n                    <GeoJSON\n                        data={{\n                            type: \"Feature\",\n                            properties: {},\n                            geometry: data.country.geom\n                        }}\n                        className=\"country-layer\"\n                        style={() => ({\n                            stroke: false,\n                            weight: 1,\n                            fillOpacity: 0.1\n                        })}\n                    />\n                ) : null}\n\n                {highlightMarker.geometry.coordinates ? (\n                    <CircleMarker\n                        key={`highlight-layer-${highlightMarker.title}`}\n                        center={[\n                            highlightMarker.geometry.coordinates[1],\n                            highlightMarker.geometry.coordinates[0]\n                        ]}\n                        stroke\n                        strokeColor=\"#00FFFF\"\n                        strokeOpacity={0.7}\n                        radius={20}\n                    />\n                ) : null}\n            </Map>\n        </div>\n    );\n};\n\nconst mapStateToProps = ({ data, highlightMarker, detail }) => ({\n    data,\n    highlightMarker,\n    detail\n});\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            fetchData,\n            fetchDetail,\n            toggleHighlightMarker\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeafletMap);\n","import React from \"react\";\nimport { Modal, Button } from \"antd\";\n\nexport const AboutModal = ({ visible, onClose }) => {\n    return (\n        <Modal\n            title=\"Welcome to the GIS Jobs Map\"\n            visible={visible}\n            onClose={onClose}\n            onCancel={onClose}\n            footer={\n                <Button key=\"close\" onClick={onClose}>\n                    OK\n                </Button>\n            }\n        >\n            <h3>About</h3>\n\n            <p>\n                The GIS Jobs Map catalogues the latest GIS, Remote Sensing,\n                Cartographic and Geospatial related jobs in several countries\n                around the world. GIS job data is regularly updated from{\" \"}\n                <a href=\"https://www.indeed.com\">Indeed.com</a>.\n            </p>\n\n            <h3>Contact</h3>\n            <p>\n                Have a question, comment or suggestion? Find a bug or data\n                issue? It would be great to hear about it, feel free to contact{\" \"}\n                <a href=\"mailto:admin@gisjobsmap.com>\">admin@gisjobsmap.com</a>{\" \"}\n                with details. You can also follow on Twitter{\" \"}\n                <a href=\"https://twitter.com/GISJobsMap\">@GISJobsMap</a>.\n            </p>\n\n            <h3>Like what you see?</h3>\n\n            <p>\n                Keep this site going! All donations go towards hosting and\n                improving this site. Even the smallest amount is greatly\n                appreciated.\n                <div style={{ textAlign: \"center\", marginTop: \"20px\" }}>\n                    <form\n                        action=\"https://www.paypal.com/cgi-bin/webscr\"\n                        method=\"post\"\n                        target=\"_blank\"\n                    >\n                        <input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\" />\n                        <input\n                            type=\"hidden\"\n                            name=\"hosted_button_id\"\n                            value=\"MAZV5KVWM7M6J\"\n                        />\n                        <input\n                            type=\"image\"\n                            src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\"\n                            border=\"0\"\n                            name=\"submit\"\n                            title=\"PayPal - The safer, easier way to pay online!\"\n                            alt=\"Donate with PayPal button\"\n                        />\n                        <img\n                            alt=\"\"\n                            border=\"0\"\n                            src=\"https://www.paypal.com/en_US/i/scr/pixel.gif\"\n                            width=\"1\"\n                            height=\"1\"\n                        />\n                    </form>\n                </div>\n            </p>\n        </Modal>\n    );\n};\n","import React from \"react\";\nimport { Modal, Button } from \"antd\";\n\nexport const PrivacyModal = ({ visible, onClose }) => {\n    return (\n        <Modal\n            title=\"Privacy Policy\"\n            visible={visible}\n            onClose={onClose}\n            onCancel={onClose}\n            footer={\n                <Button key=\"close\" onClick={onClose}>\n                    OK\n                </Button>\n            }\n        >\n            <h3>Privacy Policy</h3>\n            <p>\n                We (The GIS Jobs Map) respect your privacy regarding any\n                information thats collected from you across our website,{\" \"}\n                <a href=\"https://gisjobsmap.com\">https://gisjobsmap.com</a>.\n            </p>\n            <p>\n                We only ask for personal information when we truly need it to\n                provide a service to you. We collect it by fair and lawful\n                means, with your knowledge and consent. We also let you know why\n                we’re collecting it and how it will be used.\n            </p>\n            <p>\n                We don’t share any personally identifying information publicly\n                or with third-parties, except when required to by law.\n            </p>\n            <p>\n                Our website may link to external sites that are not operated by\n                us. Please be aware that we have no control over the content and\n                practices of these sites, and cannot accept responsibility or\n                liability for their respective privacy policies.\n            </p>\n            <p>\n                You are free to refuse our request for your personal\n                information, with the understanding that we may be unable to\n                provide you with some of your desired services.\n            </p>\n            <p>\n                Your continued use of our website will be regarded as acceptance\n                of our practices around privacy and personal information. If you\n                have any questions about how we handle user data and personal\n                information, feel free to contact us.\n            </p>\n            <p>This policy is effective as of June 1 2020.</p>\n        </Modal>\n    );\n};\n","import React, { useState, useMemo } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Layout, Menu, Icon } from \"antd\";\nimport \"flag-icon-css/css/flag-icon.css\";\n\nimport { fetchGeocodeResults, setGeocodeResults } from \"../../modules/geocode\";\n\nimport { fetchData } from \"../../modules/data\";\n\nimport { AboutModal } from \"../AboutModal\";\nimport { PrivacyModal } from \"../PrivacyModal\";\n\nimport \"./Navbar.css\";\n\nconst Navbar = () => {\n    const [aboutModalVisible, setAboutModalVisible] = useState(false);\n    const [privacyModalVisible, setPrivacyModalVisible] = useState(false);\n\n    const handleMenuClick = e => {\n        const { key } = e;\n        if (key) {\n            if (key === \"About\") {\n                setAboutModalVisible(true);\n            } else if (key === \"Privacy\") {\n                setPrivacyModalVisible(true);\n            } else if (key.indexOf(\"twitter\") > -1) {\n                window.open(\"https://twitter.com/gisjobsmap\");\n            }\n        }\n    };\n\n    // memoized to prevent unecessary rerendering\n    const aboutMemo = useMemo(() => {\n        return (\n            <AboutModal\n                visible={aboutModalVisible}\n                onClose={() => setAboutModalVisible(false)}\n            />\n        );\n    }, [aboutModalVisible]);\n\n    const privacyMemo = useMemo(() => {\n        return (\n            <PrivacyModal\n                visible={privacyModalVisible}\n                onClose={() => setPrivacyModalVisible(false)}\n            />\n        );\n    }, [privacyModalVisible]);\n\n    return (\n        <Layout.Header\n            className=\"header\"\n            style={{\n                background: \"white\",\n                padding: \"0\",\n                position: \"fixed\",\n                zIndex: 600,\n                width: \"100%\",\n                height: \"51px\"\n            }}\n        >\n            <div className=\"logo\" />\n            <Menu\n                theme=\"light\"\n                mode=\"horizontal\"\n                style={{\n                    lineHeight: \"64px\",\n                    height: \"50px\",\n                    width: \"65px\",\n                    float: \"right\"\n                }}\n                onClick={e => handleMenuClick(e)}\n                selectedKeys={[]}\n                key=\"nav\"\n            >\n                {aboutMemo}\n                {privacyMemo}\n\n                <Menu.SubMenu\n                    key=\"submenu\"\n                    expandIcon={<Icon type=\"menu\" />}\n                    style={{\n                        lineHeight: \"54px\",\n                        float: \"right\",\n                        height: \"49px\",\n                        paddingLeft: \"0px\"\n                    }}\n                    title={\n                        <span>\n                            <Icon type=\"menu\" style={{ marginRight: \"5px\" }} />\n                        </span>\n                    }\n                >\n                    <Menu.Item\n                        key=\"twitter\"\n                        className=\"navMenuItem\"\n                        style={{ padding: \"0 10px !important\" }}\n                    >\n                        <span>\n                            <Icon type=\"twitter-o\" color=\"blue\" />\n                            Follow Us\n                        </span>\n                    </Menu.Item>\n\n                    <Menu.Item\n                        key=\"About\"\n                        className=\"navMenuItem\"\n                        style={{ padding: \"0 10px !important\" }}\n                    >\n                        <span>\n                            <Icon type=\"question-circle\" />\n                            About\n                        </span>\n                    </Menu.Item>\n\n                    <Menu.Item\n                        key=\"Privacy\"\n                        className=\"navMenuItem\"\n                        style={{ padding: \"0 10px !important\" }}\n                    >\n                        <span>\n                            <Icon type=\"exclamation-circle\" />\n                            Privacy Policy\n                        </span>\n                    </Menu.Item>\n                </Menu.SubMenu>\n            </Menu>\n        </Layout.Header>\n    );\n};\n\nconst mapStateToProps = ({ highlightLayer, data }) => ({\n    highlightLayer,\n    data\n});\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            fetchGeocodeResults,\n            setGeocodeResults,\n            fetchData\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\n","import React, { createContext, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const JobPostContext = createContext();\n\nfunction JobPostContextProvider({ children }) {\n    const [isJobPostOpen, setJobPostOpen] = useState(false);\n\n    return (\n        <JobPostContext.Provider\n            value={{\n                isJobPostOpen,\n                setJobPostOpen\n            }}\n        >\n            {children}\n        </JobPostContext.Provider>\n    );\n}\n\nJobPostContextProvider.propTypes = {\n    children: PropTypes.any\n};\n\nexport default JobPostContextProvider;\n","import React from \"react\";\n\nimport { Icon, Row, Col, Typography } from \"antd\";\n\nconst { Title, Text, Paragraph } = Typography;\n\nconst iconStyle = { fontSize: \"16px\", color: \"#38b338\", marginRight: \"10px\" };\n\nconst iconType = \"check\";\n\nexport const JobPostInfo = () => {\n    return (\n        <div style={{ margin: \"20px 0\", padding: \"20px 0\" }}>\n            <Row>\n                <Row gutter={24}>\n                    <Col span={12}>\n                        <div style={{ marginTop: \"2.5em\" }}>\n                            <Title level={3}>Post a Job for $1/day</Title>\n                            <Paragraph style={{ marginTop: \".4em\" }}>\n                                <Text strong>30 day minimum</Text>\n                            </Paragraph>\n                        </div>\n                    </Col>\n\n                    <Col span={12} style={{ textAlign: \"left\" }}>\n                        <Paragraph>\n                            <Icon type={iconType} style={iconStyle} />\n                            <Text strong>High Visibility</Text>\n                        </Paragraph>\n\n                        {/* <Paragraph>\n              <Icon type={iconType} style={iconStyle} />\n              <Text strong>Attract Candidates Locally and Remotely</Text>\n            </Paragraph> */}\n\n                        <Paragraph>\n                            <Icon type={iconType} style={iconStyle} />\n                            <Text strong>Shareable URL</Text>\n                        </Paragraph>\n\n                        <Paragraph>\n                            <Icon type={iconType} style={iconStyle} />\n                            <Text strong>Secure Payment Processing</Text>\n                        </Paragraph>\n\n                        <Paragraph>\n                            <Icon type={iconType} style={iconStyle} />\n                            <Text strong>Responsive Customer Support</Text>\n                        </Paragraph>\n                    </Col>\n                </Row>\n                <Row>\n                    <Paragraph style={{ marginTop: \"20px\", marginBottom: \"0\" }}>\n                        Please\n                        <a href=\"mailto:admin@gisjobsmap.com?subject=Job Post Inquiry\">\n                            {\" \"}\n                            contact us{\" \"}\n                        </a>\n                        with any inquiries regarding job postings.\n                    </Paragraph>\n                </Row>\n            </Row>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport { Form, Input, Tooltip, Icon, Select } from \"antd\";\n\nimport { parseJSON } from \"../../../utils/misc\";\n\nimport { getTags, getCategories } from \"../../../utils/http_functions\";\n\nconst { Option } = Select;\n\nconst formItemLayout = {\n    labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n        md: { span: 4 },\n        lg: { span: 4 }\n    },\n    wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n        md: { span: 20 },\n        lg: { span: 20 }\n    }\n};\n\nexport const JobPostDetails = props => {\n    const { values } = props;\n    const [tags, setTags] = useState([]);\n\n    const [categories, setCategories] = useState([]);\n\n    const populateTags = () => {\n        getTags()\n            .then(parseJSON)\n            .then(response => {\n                setTags(response.data);\n            })\n            .catch(error => {\n                console.log(\"get tags error: \", error);\n                setTags([]);\n            });\n    };\n\n    const populateCategories = () => {\n        getCategories()\n            .then(parseJSON)\n            .then(response => {\n                setCategories(response.data);\n            })\n            .catch(error => {\n                console.log(\"populate categories error: \", error);\n                setCategories([]);\n            });\n    };\n\n    const { getFieldDecorator } = props.form;\n\n    useEffect(() => {\n        // handleTagSearch();\n        populateTags();\n        populateCategories();\n    }, []);\n\n    return (\n        <div style={{ margin: \"20px\", padding: \"20px\", textAlign: \"left\" }}>\n            <Form {...formItemLayout} labelAlign=\"left\" colon>\n                <Form.Item label={<span>Job Title</span>}>\n                    {getFieldDecorator(\"title\", {\n                        initialValue: values.title,\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please enter a Job Title.\",\n                                whitespace: true\n                            }\n                        ]\n                    })(\n                        <Input\n                            placeholder=\"GIS Developer\"\n                            style={{ maxWidth: \"400px\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item label={<span>Organization</span>}>\n                    {getFieldDecorator(\"organization\", {\n                        initialValue: values.organization,\n                        rules: [\n                            {\n                                required: true,\n                                message: \"Please enter the Organization name.\",\n                                whitespace: true\n                            }\n                        ]\n                    })(\n                        <Input\n                            placeholder=\"My Organization\"\n                            style={{ maxWidth: \"400px\" }}\n                        />\n                    )}\n                </Form.Item>\n\n                <Form.Item\n                    help=\"2 categories max\"\n                    label={\n                        <span>\n                            Categories&nbsp;\n                            <Tooltip title=\"A Category makes the listing stand out. Pick a category or 2 that is relvant to the positon.\">\n                                <Icon type=\"question-circle-o\" />\n                            </Tooltip>\n                        </span>\n                    }\n                >\n                    {getFieldDecorator(\"categories\", {\n                        initialValue: values.categories,\n                        rules: [\n                            {\n                                max: 2,\n                                type: \"array\",\n                                required: true,\n                                message: \"Please select at least one category.\"\n                                // whitespace: true\n                            }\n                        ]\n                    })(\n                        <Select\n                            placeholder=\"Choose relevant categories\"\n                            mode=\"multiple\"\n                            style={{ maxWidth: \"500px\" }}\n                        >\n                            {categories.length\n                                ? categories.map(item => {\n                                      return (\n                                          <Option\n                                              key={item.id}\n                                              value={item.name}\n                                          >\n                                              {item.name}\n                                          </Option>\n                                      );\n                                  })\n                                : null}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item\n                    help=\"7 tags max\"\n                    label={\n                        <span>\n                            Tags&nbsp;\n                            <Tooltip title=\"Tags are extra descriptors of the job posting. Select tags that are relevant to the listing.\">\n                                <Icon type=\"question-circle-o\" />\n                            </Tooltip>\n                        </span>\n                    }\n                >\n                    {getFieldDecorator(\"tags\", {\n                        initialValue: values.tags,\n                        rules: [\n                            {\n                                required: true,\n                                max: 7,\n                                type: \"array\",\n                                message: \"Please select at least one tag.\"\n                            }\n                        ]\n                    })(\n                        <Select\n                            mode=\"multiple\"\n                            placeholder=\"Choose relevant tags\"\n                            style={{ maxWidth: \"500px\" }}\n                            // onSearch={handleTagSearch}\n                        >\n                            {tags.length\n                                ? tags.map(item => {\n                                      return (\n                                          <Option\n                                              key={item.id}\n                                              value={item.name}\n                                          >\n                                              {item.name}\n                                          </Option>\n                                      );\n                                  })\n                                : null}\n                        </Select>\n                    )}\n                </Form.Item>\n\n                <Form.Item label={<span>External Link</span>}>\n                    {getFieldDecorator(\"url\", {\n                        initialValue: values.url,\n                        rules: [\n                            {\n                                whitespace: true,\n                                type: \"url\"\n                            }\n                        ]\n                    })(\n                        <Input placeholder=\"http://my-organization/gis-manager-application\" />\n                    )}\n                </Form.Item>\n\n                <Form.Item label={<span>Compensation</span>}>\n                    {getFieldDecorator(\"compensation\", {\n                        initialValue: values.compensation,\n                        rules: [\n                            {\n                                required: false,\n                                whitespace: true,\n                                max: 150\n                            }\n                        ]\n                    })(\n                        <Input\n                            style={{ maxWidth: \"400px\" }}\n                            placeholder=\"$85,000 USD\"\n                        />\n                    )}\n                </Form.Item>\n\n                {/* <Form.Item label={<span>Career Level</span>}>\n          {getFieldDecorator(\"careerLevel\", {\n            initialValue: values.careerLevel,\n            rules: [\n              {\n                required: false,\n                whitespace: true,\n                type: 'array'\n              }\n            ]\n          })(\n            <Select\n            >\n              {careerLevels.length\n                ? careerLevels.map(item => {\n                  return (\n                    <Option key={item} value={item}>\n                      {item}\n                    </Option>\n                  );\n                })\n                : null}\n            </Select>)}\n        </Form.Item>\n\n        <Form.Item label={<span>Security Cleance</span>}>\n          {getFieldDecorator(\"securityClearanceReq\", {\n            initialValue: values.securityClearanceReq,\n            rules: [\n              {\n                required: false,\n                whitespace: true,\n                max: 100\n              }\n            ]\n          })(\n            <Input />\n          )}\n        </Form.Item>\n\n        <Form.Item label={<span>Employment Type</span>}>\n          {getFieldDecorator(\"employmentType\", {\n            initialValue: values.employmentType,\n            rules: [\n              {\n                required: false,\n                whitespace: true,\n                max: 100\n              }\n            ]\n          })(\n            <Input />\n          )}\n        </Form.Item>\n\n        <Form.Item label={<span>Career level</span>}>\n          {getFieldDecorator(\"careerLevel\", {\n            initialValue: values.careerLevel,\n            rules: [\n              {\n                required: false,\n                whitespace: true,\n                max: 100\n              }\n            ]\n          })(\n            <Input />\n          )}\n        </Form.Item>\n\n        <Form.Item label={<span>Travel Percentage</span>}>\n          {getFieldDecorator(\"travelPercentage\", {\n            initialValue: values.travelPercentage,\n            rules: [\n              {\n                required: false,\n                whitespace: true,\n                max: 100\n              }\n            ]\n          })(\n            <Input />\n          )}\n        </Form.Item> */}\n\n                <Form.Item label={<span>Description</span>}>\n                    {getFieldDecorator(\"description\", {\n                        initialValue: values.description,\n                        rules: [\n                            {\n                                required: true,\n                                message:\n                                    \"Please enter a description of at least 150 characters.\",\n                                whitespace: true,\n                                min: 150\n                            }\n                        ]\n                    })(\n                        <Input.TextArea\n                            placeholder=\"Enter a description. Be sure to include all relevant information including any necessary contact info.\"\n                            rows={10}\n                        />\n                    )}\n                </Form.Item>\n            </Form>\n        </div>\n    );\n};\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { basemapProvider } from \"../../../config\";\nimport {\n    Icon,\n    Tooltip,\n    Radio,\n    Row,\n    Col,\n    Form,\n    Select,\n    AutoComplete\n} from \"antd\";\n\nimport { Map, TileLayer, Marker } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { parseJSON } from \"../../../utils/misc\";\n\nimport { getGeocode } from \"../../../utils/http_functions\";\n\nimport \"flag-icon-css/css/flag-icon.css\";\nimport { countries } from \"../../../config\";\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"), // eslint-disable-line global-require\n    iconUrl: require(\"leaflet/dist/images/marker-icon.png\"), // eslint-disable-line global-require\n    shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\") // eslint-disable-line global-require\n});\n\nconst formItemLayout = {\n    layout: \"vertical\"\n};\n\nconst getGeocodeOptions = item => {\n    const { id, admin1, name } = item.properties;\n    const formatted = `${name}, ${admin1}`;\n\n    return (\n        <AutoComplete.Option key={id} value={JSON.stringify(item)}>\n            {formatted}\n        </AutoComplete.Option>\n    );\n};\n\nexport const JobPostLocation = props => {\n    const { values, form } = props;\n\n    const mapRef = useRef(null);\n\n    const [geocodeOptions, setGeocodeOptions] = useState([]);\n\n    const { getFieldDecorator } = props.form;\n\n    const setMapCoords = (lat, lon) => {\n        if (mapRef.current) {\n            if (lat && lon) {\n                mapRef.current.leafletElement.setView([lat, lon], 9);\n                // console.log('values', values)\n                // L.popup({ closeButton: false, autoPan: false, offset: [0, -15] })\n                //   .setLatLng(coords)\n                //   .setContent(values.location)\n                //   // .setContent(values.title)\n                //   .openOn(mapRef.current.leafletElement);\n            } else {\n                mapRef.current.leafletElement.closePopup();\n            }\n        }\n    };\n\n    // useEffect(() => {\n    //   setMapCoords();\n    // }, [coords]);\n\n    useEffect(() => {\n        setMapCoords(values.lat, values.lon);\n    }, []);\n\n    const mapStyle = {\n        position: \"relative\",\n        width: \"100%\",\n        height: \"100%\",\n        // marginTop: \"50px\",\n        zIndex: \"1\"\n    };\n\n    const mapOverlayStyle = {\n        position: \"absolute\",\n        background: \"rgba(255, 255, 255, 0.3)\",\n        height: \"100%\",\n        width: \"100%\",\n        paddingTop: \"33%\",\n        zIndex: 2\n    };\n\n    // const onMapClick = e => {\n    //   const { latlng } = e;\n    //   const { lat, lng } = latlng;\n    //   setCoords([lat, lng]);\n    //   // form.setFieldsValue({ coordinates: [lat, lng] });\n    //   getReverseGeocode({ lat, lon: lng, accuracy: .1 })\n    //     .then(parseJSON)\n    //     .then(response => {\n    //       const { data } = response;\n    //       if (data.length) {\n    //         const { properties, geometry } = data[data.length - 1];\n    //         const { coordinates } = geometry;\n    //         form.setFieldsValue({ coordinates });\n\n    //         form.setFieldsValue({ countryCode: properties.iso2.toLowerCase() });\n    //         form.setFieldsValue({\n    //           city: `${properties.name}, ${properties.admin1}`\n    //         });\n    //         setGeocodeOptions([data[0]]);\n\n    //       }\n\n    //     })\n    //     .catch(error => {\n    //       console.error(\"get reversegeocode error: \", error);\n    //       setGeocodeOptions([]);\n    //     });\n    // };\n\n    const onRemoteChange = e => {\n        const { value } = e.target;\n        console.log(\"value\", value);\n        values.remote = value;\n        // if (value == \"yes\") {\n        //   setRemote(true);\n        //   value\n        // } else {\n        //   setRemote(false);\n        // }\n    };\n\n    const onCountryChange = val => {\n        // setCountry(val);\n        values.countryCode = val;\n        // if (values.formattedLocation) {\n        // values.lat = 0;\n        // values.lon = 0;\n        // values.city = undefined;\n        // values.state = undefined;\n        // values.formattedLocation = undefined;\n\n        form.setFieldsValue({\n            formattedLocation: undefined,\n            city: undefined,\n            state: undefined,\n            lat: undefined,\n            lon: undefined\n        });\n        // }\n    };\n\n    const onGeocodeChange = search => {\n        values.formattedLocation = search;\n        if (search) {\n            getGeocode({ text: search, iso2: values.countryCode })\n                .then(parseJSON)\n                .then(response => {\n                    setGeocodeOptions(response.data);\n                })\n                .catch(error => {\n                    console.error(\"get geocode error: \", error);\n                    setGeocodeOptions([]);\n                });\n        } else {\n            // setCoords([]);\n            values.lat = 0;\n            values.lon = 0;\n        }\n    };\n\n    const getFormattedLocationHelpText = () => {\n        if (!values.countryCode) {\n            return \"Please select a country first\";\n        }\n        if (values.remote === \"yes\") {\n            return \"City not required with 100% remote jobs\";\n        }\n        return \"\";\n    };\n\n    const handleGeocodeSelect = val => {\n        // console.log('val', val)\n        // console.log('option', option)\n        const item = JSON.parse(val);\n        const { properties, geometry } = item;\n        const { coordinates } = geometry;\n        // setCoords([coordinates[1], coordinates[0]]);\n        // values.coordinates = [coordinates[1], coordinates[0]]\n        const lat = coordinates[1];\n        const lon = coordinates[0];\n        values.lat = lat;\n        values.lon = lon;\n        values.city = properties.name;\n        values.state = properties.admin1;\n        values.formattedLocation = `${properties.name}, ${properties.admin1}`;\n        setMapCoords(lat, lon);\n        // if (!values.countryCode.length) {\n        //   form.setFieldsValue({ countryCode: iso2.toLowerCase() });\n        // }\n        form.setFieldsValue({\n            formattedLocation: `${properties.name}, ${properties.admin1}`,\n            city: properties.name,\n            state: properties.admin1,\n            lat,\n            lon\n        });\n        // form.setFieldsValue({ lat: values.lat });\n        // form.setFieldsValue({ lon: values.lon });\n    };\n\n    return (\n        <div style={{ padding: \"20px\" }}>\n            <Row gutter={24} type=\"flex\">\n                <Col span={12} style={{ textAlign: \"left\" }}>\n                    <Form {...formItemLayout} labelAlign=\"left\" colon>\n                        <Form.Item label=\"Country\" hasFeedback>\n                            {getFieldDecorator(\"countryCode\", {\n                                initialValue: values.countryCode,\n                                rules: [\n                                    {\n                                        required: true,\n                                        message: \"Please select a country\",\n                                        min: 2\n                                    }\n                                ]\n                            })(\n                                <Select\n                                    showSearch\n                                    onChange={onCountryChange}\n                                    style={{ maxWidth: \"200px\" }}\n                                >\n                                    {Object.keys(countries).map(key => {\n                                        return (\n                                            <Select.Option\n                                                key={key}\n                                                value={key}\n                                            >\n                                                <span\n                                                    className={`flag-icon flag-icon-${key}`}\n                                                />{\" \"}\n                                                {countries[key]}\n                                            </Select.Option>\n                                        );\n                                    })}\n                                </Select>\n                            )}\n                        </Form.Item>\n\n                        <Form.Item\n                            label={\n                                <span>\n                                    100% Remote&nbsp;\n                                    <Tooltip title=\"If 'Yes' is selected, the position will be displayed on the list for all areas of the selected country.\">\n                                        <Icon type=\"question-circle-o\" />\n                                    </Tooltip>\n                                </span>\n                            }\n                        >\n                            {getFieldDecorator(\"remote\", {\n                                initialValue: values.remote ? values.remote : 0\n                            })(\n                                <Radio.Group onChange={onRemoteChange}>\n                                    <Radio.Button value={0}>No</Radio.Button>\n                                    <Radio.Button value={1}>Yes</Radio.Button>\n                                    {/* <Radio.Button value=\"possible\">Possible</Radio.Button> */}\n                                </Radio.Group>\n                            )}\n                        </Form.Item>\n                        {values.remote !== 1 ? (\n                            <Form.Item\n                                label=\"City\"\n                                help={getFormattedLocationHelpText()}\n                                // help={remote ? \"\" : \"Optionally select location by clicking the map\"}\n                            >\n                                {getFieldDecorator(\"formattedLocation\", {\n                                    initialValue: values.formattedLocation,\n                                    rules: [\n                                        {\n                                            required: values.remote !== 1,\n                                            message: \"Please enter a valid city\"\n                                        }\n                                    ]\n                                })(\n                                    <AutoComplete\n                                        allowClear\n                                        // value={values.formattedLocation}\n                                        // className=\"geocoder-autocomplete\"\n                                        // disabled={values.remote === \"yes\" || remote || !values.country || !country}\n                                        disabled={!values.countryCode}\n                                        placeholder=\"Type a City...\"\n                                        filterOption={false}\n                                        optionLabelProp=\"text\"\n                                        //  style={{ width: '400px' }}\n                                        dataSource={geocodeOptions.map(opt =>\n                                            getGeocodeOptions(opt)\n                                        )}\n                                        onSelect={handleGeocodeSelect}\n                                        onChange={onGeocodeChange}\n                                    />\n                                )}\n                            </Form.Item>\n                        ) : null}\n\n                        <Form.Item style={{ display: \"none\" }}>\n                            {getFieldDecorator(\"lat\", {\n                                initialValue: values.lat\n                            })(<div />)}\n                        </Form.Item>\n                        <Form.Item style={{ display: \"none\" }}>\n                            {getFieldDecorator(\"lon\", {\n                                initialValue: values.lon\n                            })(<div />)}\n                        </Form.Item>\n                        <Form.Item style={{ display: \"none\" }}>\n                            {getFieldDecorator(\"city\", {\n                                initialValue: values.city\n                            })(<div />)}\n                        </Form.Item>\n                        <Form.Item style={{ display: \"none\" }}>\n                            {getFieldDecorator(\"state\", {\n                                initialValue: values.state\n                            })(<div />)}\n                        </Form.Item>\n                    </Form>\n                </Col>\n                <Col span={12}>\n                    <div style={mapOverlayStyle} />\n                    <div style={mapStyle}>\n                        <Map\n                            className=\"leaflet-map\"\n                            zoomControl={false}\n                            maxZoom={12}\n                            zoom={1}\n                            center={{ lat: 50, lng: 0 }}\n                            // onClick={onMapClick}\n                            ref={mapRef}\n                        >\n                            <TileLayer\n                                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                                url={basemapProvider}\n                            />\n\n                            {/* {(values.remote !== \"yes\" || !remote) && (\n                <ZoomControl position=\"bottomright\" />\n              )} */}\n\n                            {values.lat && values.lon ? (\n                                <Marker\n                                    key={`highlight-layer-title`}\n                                    position={[values.lat, values.lon]}\n                                    stroke\n                                    strokeColor=\"#00FFFF\"\n                                    strokeOpacity={0.7}\n                                    radius={20}\n                                />\n                            ) : null}\n                        </Map>\n                    </div>\n                </Col>\n            </Row>\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { Input, Row, Col, Select, Form, Button } from \"antd\";\nimport \"flag-icon-css/css/flag-icon.css\";\n\nimport { postJob } from \"../../../utils/http_functions\";\nimport { parseJSON } from \"../../../utils/misc\";\nconst { Option } = Select;\n\nexport const JobPostPayment = props => {\n    const [stripeCheck, setStripeCheck] = useState(false);\n\n    const [successMessage, setSuccessMessage] = useState(\"\");\n\n    const [errMessage, setErrMessage] = useState(\"\");\n\n    const { values, form } = props;\n\n    const { getFieldDecorator } = form;\n\n    const formItemLayout = {\n        labelCol: {\n            xs: { span: 24 },\n            sm: { span: 8 }\n        },\n        wrapperCol: {\n            xs: { span: 24 },\n            sm: { span: 16 }\n        }\n    };\n\n    const tailFormItemLayout = {\n        wrapperCol: {\n            xs: {\n                span: 24,\n                offset: 0\n            },\n            sm: {\n                span: 16,\n                offset: 8\n            }\n        }\n    };\n\n    // const parseExpirationDate = val => {\n    //     val.expDate = val;\n    //     if (val && val.length == 5) {\n    //         const split = val.split(\"/\");\n    //         const mo = split[0];\n    //         const yr = split[1];\n    //         return [mo, yr];\n    //     }\n    //     return [];\n    // };\n\n    const onDaysChange = val => {\n        values.activeDays = val;\n    };\n\n    const submitJob = e => {\n        e.preventDefault();\n        form.validateFieldsAndScroll((err, values) => {\n            if (err) {\n                console.log(\"error\", err);\n                return;\n            }\n            console.log(\"values\", values);\n            setStripeCheck(true);\n            console.log(\"key\", process.env.REACT_APP_STRIPE_PUBLISH_KEY);\n            window.Stripe.setPublishableKey(\n                process.env.REACT_APP_STRIPE_PUBLISH_KEY\n            );\n            // const ed = parseExpirationDate(form.getFieldValue('expDate'))\n            const card = {\n                number: values.card,\n                cvc: values.cvc,\n                exp_month: values.expDate.slice(0, 2),\n                exp_year: values.expDate.slice(2, 4)\n            };\n            console.log(card);\n            window.Stripe.createToken(card, (status, response) => {\n                if (response.error) {\n                    setStripeCheck(false);\n                    // this.errors.push(response.error.message);\n                    // eslint-disable-next-line\n                    console.error(response);\n                    const { message } = response.error;\n                    console.log(message);\n                    setErrMessage(\n                        <span>\n                            <strong>Payment Error: </strong>\n                            {message}\n                        </span>\n                    );\n                } else {\n                    const payload = {\n                        stripeToken: response.id,\n                        ...values\n                    };\n                    postJob(payload)\n                        .then(parseJSON)\n                        .then(response => {\n                            const { message, id, success } = response;\n                            if (success) {\n                                setSuccessMessage(\n                                    <span>\n                                        Success. Your job posting is now visible\n                                        at `https://www.gisjobsmap.com/job/\n                                        {message.id}-{message.slug}`.\n                                    </span>\n                                );\n                            }\n                            setErrMessage(\"\");\n                        })\n                        .catch(error => {\n                            setStripeCheck(false);\n                            if (error.response) {\n                                setErrMessage(\n                                    <span>\n                                        <strong>Server Error: </strong>code{\" \"}\n                                        {error.response.status}. Please try\n                                        again.\n                                    </span>\n                                );\n                            } else {\n                                setErrMessage(\n                                    <span>\n                                        <strong>Server Error.</strong> Please\n                                        try again.\n                                    </span>\n                                );\n                            }\n                        });\n                }\n            });\n        });\n    };\n\n    const handleExpDateChange = e => {\n        e.preventDefault();\n        const { value } = e.target;\n        const formattedValue = value.slice(0, 2) + \"-\" + value.slice(2, 4);\n        console.log(formattedValue);\n        form.setFieldsValue({\n            expDate: formattedValue\n        });\n    };\n\n    return (\n        <div style={{ padding: \"20px\" }}>\n            <Row gutter={24} type=\"flex\">\n                <Col span={24} style={{ textAlign: \"left\" }}>\n                    <Form\n                        {...formItemLayout}\n                        labelAlign=\"left\"\n                        onSubmit={submitJob}\n                    >\n                        <Form.Item label={<span>Job Post Duration</span>}>\n                            {getFieldDecorator(\"activeDays\", {\n                                initialValue: values.activeDays,\n                                rules: [\n                                    {\n                                        required: true,\n                                        message:\n                                            \"Please select a job post duration.\"\n                                    }\n                                ]\n                            })(\n                                <Select\n                                    placeholder=\"Select duration\"\n                                    onChange={onDaysChange}\n                                    style={{ maxWidth: \"200px\" }}\n                                >\n                                    {[30, 60, 90, 120].map(item => {\n                                        return (\n                                            <Option key={item} value={item}>\n                                                {item} days\n                                            </Option>\n                                        );\n                                    })}\n                                </Select>\n                            )}\n                        </Form.Item>\n\n                        <Form.Item label={<span>Billing Email</span>}>\n                            {getFieldDecorator(\"email\", {\n                                initialValue: values.email,\n                                rules: [\n                                    {\n                                        required: true,\n                                        message: \"Please enter a valid email.\",\n                                        type: \"email\"\n                                    }\n                                ]\n                            })(\n                                <Input\n                                    placeholder=\"jane.doe@gmail.com\"\n                                    style={{ maxWidth: \"300px\" }}\n                                />\n                            )}\n                        </Form.Item>\n\n                        <Form.Item label={<span>Card Number</span>}>\n                            {getFieldDecorator(\"card\", {\n                                // initialValue: values.email,\n                                rules: [\n                                    {\n                                        required: true,\n                                        message:\n                                            \"Please enter a valid credit card number.\",\n                                        min: 16\n                                    }\n                                ]\n                            })(\n                                <Input\n                                    placeholder=\"XXXXXXXXXXXXXXXX\"\n                                    style={{ maxWidth: \"300px\" }}\n                                />\n                            )}\n                        </Form.Item>\n\n                        <Form.Item label={<span>CVC</span>}>\n                            {getFieldDecorator(\"cvc\", {\n                                // initialValue: values.email,\n                                rules: [\n                                    {\n                                        required: true,\n                                        len: 3,\n                                        message:\n                                            \"Please enter a valid 3 digit code.\"\n                                    }\n                                ]\n                            })(\n                                <Input\n                                    placeholder=\"CVC\"\n                                    style={{ maxWidth: \"50px\" }}\n                                />\n                            )}\n                        </Form.Item>\n\n                        <Form.Item label={<span>Exp. Date</span>}>\n                            {getFieldDecorator(\"expDate\", {\n                                initialValue: values.expDate,\n                                rules: [\n                                    {\n                                        required: true,\n                                        len: 4,\n                                        type: \"string\",\n                                        //  pattern: /^\\d{2}[\\/]\\d{2}$/,\n                                        message:\n                                            \"Please enter a valid expiration date.\"\n                                        //validator: (rule, value, cb) => parseExpirationDate(value).length == 2,\n                                    }\n                                ]\n                            })(\n                                <Input\n                                    placeholder=\"MMYY\"\n                                    style={{ maxWidth: \"90px\" }}\n                                    // value={form.expDate}\n                                    onChange={handleExpDateChange}\n                                    allowClear\n                                />\n                            )}\n                        </Form.Item>\n\n                        {/* <Form.Item label={null} {...tailFormItemLayout}>\n              {getFieldDecorator(\"agreement\", {\n                // initialValue: values.email,\n                rules: [\n                  {\n                    required: true,\n                    message: \"Please agree to the terms.\",\n                  }\n                ]\n              })(\n                <Checkbox checked={false}>\n                  I agree to the <a href=\"\">terms</a>.\n                </Checkbox>\n              )}\n            </Form.Item> */}\n\n                        <Form.Item {...tailFormItemLayout}>\n                            <div\n                                style={{\n                                    lineHeight: \"23px\",\n                                    marginBottom: \"10px\"\n                                }}\n                            >\n                                You will be charged a one-time{\" \"}\n                                <strong>\n                                    {values.activeDays &&\n                                        `$${values.activeDays} USD`}\n                                </strong>{\" \"}\n                                fee for this job posting. The charge will be\n                                billed from{\" \"}\n                                <a\n                                    href=\"http://www.cartoconcepts.com\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    Carto Concepts, LLC\n                                </a>\n                                . You will be emailed a reciept upon successfull\n                                payment processing.\n                                {/* &nbsp;&nbsp;Payments are securely processed using <a href=\"https://stripe.com/\" target=\"_blank\">Stripe</a>. */}\n                            </div>\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                                // loading={isLoading}\n                                disabled={stripeCheck}\n                                // onClick={submitJob}\n                            >\n                                Submit Job and Pay\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                    <div>\n                        {errMessage ? (\n                            <div style={{ color: \"red\" }}>{errMessage}</div>\n                        ) : null}\n                        {successMessage ? (\n                            <div style={{ color: \"green\" }}>\n                                {successMessage}\n                            </div>\n                        ) : null}\n                    </div>\n                </Col>\n            </Row>\n        </div>\n    );\n};\n","import React, { useState, useContext, useRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { Modal, Steps, Button, Form } from \"antd\";\nimport { fetchDetail } from \"../../modules/detail\";\nimport { JobPostContext } from \"../../contexts/JobPostContext\";\n\nimport { JobPostInfo } from \"./JobPostInfo\";\n\nimport { JobPostDetails } from \"./JobPostDetails\";\nimport { JobPostLocation } from \"./JobPostLocation\";\nimport { JobPostPayment } from \"./JobPostPayment\";\n\nimport \"./style.css\";\n\nconst JobPost = () => {\n    const detailFormRef = useRef();\n\n    const locationFormRef = useRef();\n\n    const paymentFormRef = useRef();\n\n    const [detailFormValues, setDetailFormValues] = useState({});\n\n    const [locationFormValues, setLocationFormValues] = useState({});\n\n    const [paymentFormValues, setPaymentFormValues] = useState({});\n\n    const WrappedDetailForm = Form.create({\n        name: \"detail\"\n    })(JobPostDetails);\n\n    const WrappedLocationForm = Form.create({\n        name: \"location\"\n    })(JobPostLocation);\n\n    const WrappedPaymentForm = Form.create({\n        name: \"payment\"\n    })(JobPostPayment);\n\n    const { isJobPostOpen, setJobPostOpen } = useContext(JobPostContext);\n\n    const [current, setCurrent] = useState(0);\n\n    const { Step } = Steps;\n\n    const steps = [\n        {\n            title: \"Info\",\n            content: <JobPostInfo />\n        },\n        {\n            title: \"Job Details\",\n            content: (\n                <WrappedDetailForm\n                    ref={detailFormRef}\n                    values={detailFormValues}\n                />\n            )\n        },\n        {\n            title: \"Job Location\",\n            content: (\n                <WrappedLocationForm\n                    ref={locationFormRef}\n                    values={locationFormValues}\n                    // values={{ ...detailFormValues, ...locationFormValues }}\n                />\n            )\n        },\n        {\n            title: \"Payment\",\n            content: (\n                <WrappedPaymentForm\n                    ref={paymentFormRef}\n                    values={{\n                        ...detailFormValues,\n                        ...locationFormValues,\n                        ...paymentFormValues\n                    }}\n                />\n            )\n        }\n    ];\n\n    const next = () => {\n        if (current === 1) {\n            detailFormRef.current.validateFieldsAndScroll((err, values) => {\n                // if (err) {\n                //   console.log(\"error\", err);\n                //   return;\n                // }\n                setCurrent(current + 1);\n                setDetailFormValues(values);\n            });\n        } else if (current === 2) {\n            locationFormRef.current.validateFieldsAndScroll((err, values) => {\n                // if (err) {\n                //   console.log(\"error\", err);\n                //   return;\n                // }\n                setCurrent(current + 1);\n                setLocationFormValues(values);\n            });\n        } else if (current === 3) {\n            paymentFormRef.current.validateFieldsAndScroll((err, values) => {\n                // if (err) {\n                //   console.log(\"error\", err);\n                //   return;\n                // }\n                setCurrent(current + 1);\n                setPaymentFormValues(values);\n            });\n        } else setCurrent(current + 1);\n    };\n\n    const prev = () => {\n        if (current === 1) {\n            detailFormRef.current.validateFieldsAndScroll((err, values) => {\n                // if (err) {\n                //   console.log(\"error\", err);\n                //   return;\n                // }\n                setCurrent(current - 1);\n                setDetailFormValues(values);\n            });\n        } else if (current === 2) {\n            locationFormRef.current.validateFieldsAndScroll((err, values) => {\n                // if (err) {\n                //   console.log(\"error\", err);\n                //   return;\n                // }\n                setCurrent(current - 1);\n                setLocationFormValues(values);\n            });\n        } else if (current === 3) {\n            paymentFormRef.current.validateFieldsAndScroll((err, values) => {\n                // if (err) {\n                //   console.log(\"error\", err);\n                //   return;\n                // }\n                setCurrent(current - 1);\n                setPaymentFormValues(values);\n            });\n        } else setCurrent(current - 1);\n    };\n\n    return (\n        <Modal\n            visible={isJobPostOpen}\n            title=\"Post a Job\"\n            onCancel={() => setJobPostOpen(false)}\n            footer={null}\n            style={{ top: 50, maxWidth: \"900px\" }}\n            width=\"calc(100% - 100px)\"\n        >\n            <div>\n                <Steps current={current} className=\"steps-post-modal\">\n                    {steps.map(item => (\n                        <Step key={item.title} title={item.title} />\n                    ))}\n                </Steps>\n\n                <div className=\"steps-content\">{steps[current].content}</div>\n\n                <div className=\"steps-action\">\n                    {current < steps.length - 1 && (\n                        <Button type=\"primary\" onClick={() => next()}>\n                            Next\n                        </Button>\n                    )}\n                    {/* {current === steps.length - 1 && (\n            <Button\n              type=\"primary\"\n              onClick={() => message.success(\"Processing complete!\")}\n            >\n              Pay Now\n            </Button>\n          )} */}\n                    {current > 0 && (\n                        <Button\n                            style={{ marginLeft: 8 }}\n                            onClick={() => prev()}\n                        >\n                            Previous\n                        </Button>\n                    )}\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nconst mapStateToProps = ({ detail }) => ({\n    detail\n});\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            fetchDetail\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JobPost);\n","import React, { createContext, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const JobDetailContext = createContext();\n\nfunction JobDetailContextProvider({ children }) {\n    const [isJobDetailOpen, setJobDetailOpen] = useState(false);\n\n    return (\n        <JobDetailContext.Provider\n            value={{\n                isJobDetailOpen,\n                setJobDetailOpen\n            }}\n        >\n            {children}\n        </JobDetailContext.Provider>\n    );\n}\n\nJobDetailContextProvider.propTypes = {\n    children: PropTypes.any\n};\n\nexport default JobDetailContextProvider;\n","import React from \"react\";\nimport { Layout } from \"antd\";\n\nimport SidebarContainer from \"../SidebarContainer\";\nimport JobDetail from \"../JobDetail\";\n\nimport LeafletMap from \"../LeafletMap\";\nimport Navbar from \"../Navbar\";\nimport JobPost from \"../JobPost\";\n\nimport SidebarContextProvider from \"../../contexts/SidebarContext\";\nimport JobPostContextProvider from \"../../contexts/JobPostContext\";\nimport JobDetailContextProvider from \"../../contexts/JobDetailContext\";\n\nimport \"./App.css\";\n\nconst App = () => (\n    <Layout className=\"App\">\n        <JobPostContextProvider>\n            <Navbar />\n            <Layout style={{ height: \"100%\" }}>\n                <JobDetailContextProvider>\n                    <SidebarContextProvider>\n                        <SidebarContainer />\n                        <LeafletMap />\n                    </SidebarContextProvider>\n                    <JobPost />\n                </JobDetailContextProvider>\n                <JobDetail />\n            </Layout>\n        </JobPostContextProvider>\n    </Layout>\n);\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Route, Switch } from \"react-router\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport ReactGA from \"react-ga\";\n\nimport \"./polyfills\";\nimport configureStore, { history } from \"./store\";\nimport App from \"./components/App\";\n\nimport \"./index.css\";\n\nconst { persistor, store } = configureStore(/* provide initial state if any */);\n\nconst target = document.querySelector(\"#root\");\n\n// Google Analytics\nif (process.env.NODE_ENV !== \"development\") {\n    ReactGA.initialize(\"UA-71564480-1\");\n    ReactGA.pageview(window.location.pathname + window.location.search);\n    history.listen((location, action) => {\n        ReactGA.set({ page: location.pathname, action });\n        ReactGA.pageview(location.pathname);\n    });\n} else {\n    console.log(\"Google Analytics disabled\"); // eslint-disable-line no-console\n}\n\nrender(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <ConnectedRouter history={history}>\n                <Switch>\n                    <Route path=\":layer?/:slug?\" component={App} />\n                    {/* <Route path=\"/job/:slug?\" component={App} /> */}\n                    {/* <Redirect from=\"*\" to=\"/map\" component={App} /> */}\n                </Switch>\n            </ConnectedRouter>\n        </PersistGate>\n    </Provider>,\n    target\n);\n"],"sourceRoot":""}